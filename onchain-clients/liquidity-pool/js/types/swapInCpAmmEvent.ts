/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getQ64128Decoder,
  getQ64128Encoder,
  type Q64128,
  type Q64128Args,
} from '.';

export type SwapInCpAmmEvent = {
  swapper: Address;
  cpAmm: Address;
  isInOut: boolean;
  swappedAmount: bigint;
  receivedAmount: bigint;
  estimatedResult: bigint;
  allowedSlippage: bigint;
  baseLiquidity: bigint;
  quoteLiquidity: bigint;
  protocolBaseFeesToRedeem: bigint;
  protocolQuoteFeesToRedeem: bigint;
  constantProductSqrt: Q64128;
  baseQuoteRatioSqrt: Q64128;
  timestamp: bigint;
};

export type SwapInCpAmmEventArgs = {
  swapper: Address;
  cpAmm: Address;
  isInOut: boolean;
  swappedAmount: number | bigint;
  receivedAmount: number | bigint;
  estimatedResult: number | bigint;
  allowedSlippage: number | bigint;
  baseLiquidity: number | bigint;
  quoteLiquidity: number | bigint;
  protocolBaseFeesToRedeem: number | bigint;
  protocolQuoteFeesToRedeem: number | bigint;
  constantProductSqrt: Q64128Args;
  baseQuoteRatioSqrt: Q64128Args;
  timestamp: number | bigint;
};

export function getSwapInCpAmmEventEncoder(): Encoder<SwapInCpAmmEventArgs> {
  return getStructEncoder([
    ['swapper', getAddressEncoder()],
    ['cpAmm', getAddressEncoder()],
    ['isInOut', getBooleanEncoder()],
    ['swappedAmount', getU64Encoder()],
    ['receivedAmount', getU64Encoder()],
    ['estimatedResult', getU64Encoder()],
    ['allowedSlippage', getU64Encoder()],
    ['baseLiquidity', getU64Encoder()],
    ['quoteLiquidity', getU64Encoder()],
    ['protocolBaseFeesToRedeem', getU64Encoder()],
    ['protocolQuoteFeesToRedeem', getU64Encoder()],
    ['constantProductSqrt', getQ64128Encoder()],
    ['baseQuoteRatioSqrt', getQ64128Encoder()],
    ['timestamp', getI64Encoder()],
  ]);
}

export function getSwapInCpAmmEventDecoder(): Decoder<SwapInCpAmmEvent> {
  return getStructDecoder([
    ['swapper', getAddressDecoder()],
    ['cpAmm', getAddressDecoder()],
    ['isInOut', getBooleanDecoder()],
    ['swappedAmount', getU64Decoder()],
    ['receivedAmount', getU64Decoder()],
    ['estimatedResult', getU64Decoder()],
    ['allowedSlippage', getU64Decoder()],
    ['baseLiquidity', getU64Decoder()],
    ['quoteLiquidity', getU64Decoder()],
    ['protocolBaseFeesToRedeem', getU64Decoder()],
    ['protocolQuoteFeesToRedeem', getU64Decoder()],
    ['constantProductSqrt', getQ64128Decoder()],
    ['baseQuoteRatioSqrt', getQ64128Decoder()],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getSwapInCpAmmEventCodec(): Codec<
  SwapInCpAmmEventArgs,
  SwapInCpAmmEvent
> {
  return combineCodec(
    getSwapInCpAmmEventEncoder(),
    getSwapInCpAmmEventDecoder()
  );
}
