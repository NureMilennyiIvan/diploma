/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';

export type InitializeCpAmmEvent = {
  creator: Address;
  cpAmm: Address;
  ammsConfig: Address;
  baseMint: Address;
  quoteMint: Address;
  lpMint: Address;
  cpAmmBaseVault: Address;
  cpAmmQuoteVault: Address;
  cpAmmLockedLpVault: Address;
  timestamp: bigint;
};

export type InitializeCpAmmEventArgs = {
  creator: Address;
  cpAmm: Address;
  ammsConfig: Address;
  baseMint: Address;
  quoteMint: Address;
  lpMint: Address;
  cpAmmBaseVault: Address;
  cpAmmQuoteVault: Address;
  cpAmmLockedLpVault: Address;
  timestamp: number | bigint;
};

export function getInitializeCpAmmEventEncoder(): Encoder<InitializeCpAmmEventArgs> {
  return getStructEncoder([
    ['creator', getAddressEncoder()],
    ['cpAmm', getAddressEncoder()],
    ['ammsConfig', getAddressEncoder()],
    ['baseMint', getAddressEncoder()],
    ['quoteMint', getAddressEncoder()],
    ['lpMint', getAddressEncoder()],
    ['cpAmmBaseVault', getAddressEncoder()],
    ['cpAmmQuoteVault', getAddressEncoder()],
    ['cpAmmLockedLpVault', getAddressEncoder()],
    ['timestamp', getI64Encoder()],
  ]);
}

export function getInitializeCpAmmEventDecoder(): Decoder<InitializeCpAmmEvent> {
  return getStructDecoder([
    ['creator', getAddressDecoder()],
    ['cpAmm', getAddressDecoder()],
    ['ammsConfig', getAddressDecoder()],
    ['baseMint', getAddressDecoder()],
    ['quoteMint', getAddressDecoder()],
    ['lpMint', getAddressDecoder()],
    ['cpAmmBaseVault', getAddressDecoder()],
    ['cpAmmQuoteVault', getAddressDecoder()],
    ['cpAmmLockedLpVault', getAddressDecoder()],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getInitializeCpAmmEventCodec(): Codec<
  InitializeCpAmmEventArgs,
  InitializeCpAmmEvent
> {
  return combineCodec(
    getInitializeCpAmmEventEncoder(),
    getInitializeCpAmmEventDecoder()
  );
}
