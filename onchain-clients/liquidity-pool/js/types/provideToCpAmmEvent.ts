/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getQ64128Decoder,
  getQ64128Encoder,
  type Q64128,
  type Q64128Args,
} from '.';

export type ProvideToCpAmmEvent = {
  provider: Address;
  cpAmm: Address;
  providedBaseLiquidity: bigint;
  providedQuoteLiquidity: bigint;
  lpTokensMinted: bigint;
  baseLiquidity: bigint;
  quoteLiquidity: bigint;
  lpTokensSupply: bigint;
  constantProductSqrt: Q64128;
  baseQuoteRatioSqrt: Q64128;
  timestamp: bigint;
};

export type ProvideToCpAmmEventArgs = {
  provider: Address;
  cpAmm: Address;
  providedBaseLiquidity: number | bigint;
  providedQuoteLiquidity: number | bigint;
  lpTokensMinted: number | bigint;
  baseLiquidity: number | bigint;
  quoteLiquidity: number | bigint;
  lpTokensSupply: number | bigint;
  constantProductSqrt: Q64128Args;
  baseQuoteRatioSqrt: Q64128Args;
  timestamp: number | bigint;
};

export function getProvideToCpAmmEventEncoder(): Encoder<ProvideToCpAmmEventArgs> {
  return getStructEncoder([
    ['provider', getAddressEncoder()],
    ['cpAmm', getAddressEncoder()],
    ['providedBaseLiquidity', getU64Encoder()],
    ['providedQuoteLiquidity', getU64Encoder()],
    ['lpTokensMinted', getU64Encoder()],
    ['baseLiquidity', getU64Encoder()],
    ['quoteLiquidity', getU64Encoder()],
    ['lpTokensSupply', getU64Encoder()],
    ['constantProductSqrt', getQ64128Encoder()],
    ['baseQuoteRatioSqrt', getQ64128Encoder()],
    ['timestamp', getI64Encoder()],
  ]);
}

export function getProvideToCpAmmEventDecoder(): Decoder<ProvideToCpAmmEvent> {
  return getStructDecoder([
    ['provider', getAddressDecoder()],
    ['cpAmm', getAddressDecoder()],
    ['providedBaseLiquidity', getU64Decoder()],
    ['providedQuoteLiquidity', getU64Decoder()],
    ['lpTokensMinted', getU64Decoder()],
    ['baseLiquidity', getU64Decoder()],
    ['quoteLiquidity', getU64Decoder()],
    ['lpTokensSupply', getU64Decoder()],
    ['constantProductSqrt', getQ64128Decoder()],
    ['baseQuoteRatioSqrt', getQ64128Decoder()],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getProvideToCpAmmEventCodec(): Codec<
  ProvideToCpAmmEventArgs,
  ProvideToCpAmmEvent
> {
  return combineCodec(
    getProvideToCpAmmEventEncoder(),
    getProvideToCpAmmEventDecoder()
  );
}
