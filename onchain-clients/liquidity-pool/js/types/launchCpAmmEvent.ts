/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getQ64128Decoder,
  getQ64128Encoder,
  type Q64128,
  type Q64128Args,
} from '.';

export type LaunchCpAmmEvent = {
  creator: Address;
  cpAmm: Address;
  baseLiquidity: bigint;
  quoteLiquidity: bigint;
  initialLockedLiquidity: bigint;
  lpTokensSupply: bigint;
  constantProductSqrt: Q64128;
  baseQuoteRatioSqrt: Q64128;
  timestamp: bigint;
};

export type LaunchCpAmmEventArgs = {
  creator: Address;
  cpAmm: Address;
  baseLiquidity: number | bigint;
  quoteLiquidity: number | bigint;
  initialLockedLiquidity: number | bigint;
  lpTokensSupply: number | bigint;
  constantProductSqrt: Q64128Args;
  baseQuoteRatioSqrt: Q64128Args;
  timestamp: number | bigint;
};

export function getLaunchCpAmmEventEncoder(): Encoder<LaunchCpAmmEventArgs> {
  return getStructEncoder([
    ['creator', getAddressEncoder()],
    ['cpAmm', getAddressEncoder()],
    ['baseLiquidity', getU64Encoder()],
    ['quoteLiquidity', getU64Encoder()],
    ['initialLockedLiquidity', getU64Encoder()],
    ['lpTokensSupply', getU64Encoder()],
    ['constantProductSqrt', getQ64128Encoder()],
    ['baseQuoteRatioSqrt', getQ64128Encoder()],
    ['timestamp', getI64Encoder()],
  ]);
}

export function getLaunchCpAmmEventDecoder(): Decoder<LaunchCpAmmEvent> {
  return getStructDecoder([
    ['creator', getAddressDecoder()],
    ['cpAmm', getAddressDecoder()],
    ['baseLiquidity', getU64Decoder()],
    ['quoteLiquidity', getU64Decoder()],
    ['initialLockedLiquidity', getU64Decoder()],
    ['lpTokensSupply', getU64Decoder()],
    ['constantProductSqrt', getQ64128Decoder()],
    ['baseQuoteRatioSqrt', getQ64128Decoder()],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getLaunchCpAmmEventCodec(): Codec<
  LaunchCpAmmEventArgs,
  LaunchCpAmmEvent
> {
  return combineCodec(
    getLaunchCpAmmEventEncoder(),
    getLaunchCpAmmEventDecoder()
  );
}
