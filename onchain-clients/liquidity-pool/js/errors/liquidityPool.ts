/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { LIQUIDITY_POOL_PROGRAM_ADDRESS } from '../programs';

/** InvalidCpAmmVaultAddress: Invalid CpAmm vault address: expected associated token account does not match. */
export const LIQUIDITY_POOL_ERROR__INVALID_CP_AMM_VAULT_ADDRESS = 0x1770; // 6000
/** InvalidCpAmmVaultOwner: CpAmm vault owner mismatch: the vault is not owned by the expected program. */
export const LIQUIDITY_POOL_ERROR__INVALID_CP_AMM_VAULT_OWNER = 0x1771; // 6001
/** ConfigFeeRateExceeded: The provided fee rate for AmmsConfig exceeds the maximum allowed value of 10000 basis points (100%). */
export const LIQUIDITY_POOL_ERROR__CONFIG_FEE_RATE_EXCEEDED = 0x1772; // 6002
/** QuoteLiquidityIsZero: Quote liquidity is zero. */
export const LIQUIDITY_POOL_ERROR__QUOTE_LIQUIDITY_IS_ZERO = 0x1773; // 6003
/** BaseLiquidityIsZero: Base liquidity is zero. */
export const LIQUIDITY_POOL_ERROR__BASE_LIQUIDITY_IS_ZERO = 0x1774; // 6004
/** InsufficientQuoteLiquidity: Quote liquidity is less then minimal operable liquidity. */
export const LIQUIDITY_POOL_ERROR__INSUFFICIENT_QUOTE_LIQUIDITY = 0x1775; // 6005
/** InsufficientBaseLiquidity: Base liquidity is less then minimal operable liquidity. */
export const LIQUIDITY_POOL_ERROR__INSUFFICIENT_BASE_LIQUIDITY = 0x1776; // 6006
/** LpTokensSupplyIsZero: Liquidity tokens supply is zero. */
export const LIQUIDITY_POOL_ERROR__LP_TOKENS_SUPPLY_IS_ZERO = 0x1777; // 6007
/** CpAmmNotLaunched: CpAmm is not launched. */
export const LIQUIDITY_POOL_ERROR__CP_AMM_NOT_LAUNCHED = 0x1778; // 6008
/** CpAmmNotInitialized: CpAmm is not initialized. */
export const LIQUIDITY_POOL_ERROR__CP_AMM_NOT_INITIALIZED = 0x1779; // 6009
/** CpAmmAlreadyInitialized: CpAmm is already initialized. */
export const LIQUIDITY_POOL_ERROR__CP_AMM_ALREADY_INITIALIZED = 0x177a; // 6010
/** CpAmmAlreadyLaunched: CpAmm is already launched. */
export const LIQUIDITY_POOL_ERROR__CP_AMM_ALREADY_LAUNCHED = 0x177b; // 6011
/** ProvidedQuoteLiquidityIsZero: Provided quote liquidity is zero. */
export const LIQUIDITY_POOL_ERROR__PROVIDED_QUOTE_LIQUIDITY_IS_ZERO = 0x177c; // 6012
/** ProvidedBaseLiquidityIsZero: Provided base liquidity is zero. */
export const LIQUIDITY_POOL_ERROR__PROVIDED_BASE_LIQUIDITY_IS_ZERO = 0x177d; // 6013
/** ProvidedLpTokensIsZero: Provided liquidity tokens are zero. */
export const LIQUIDITY_POOL_ERROR__PROVIDED_LP_TOKENS_IS_ZERO = 0x177e; // 6014
/** SwapAmountIsZero: Swap amount cannot be zero. */
export const LIQUIDITY_POOL_ERROR__SWAP_AMOUNT_IS_ZERO = 0x177f; // 6015
/** EstimatedResultIsZero: Estimated swap result cannot be zero. */
export const LIQUIDITY_POOL_ERROR__ESTIMATED_RESULT_IS_ZERO = 0x1780; // 6016
/** LaunchLiquidityTooSmall: Launch liquidity must be at least 4 times greater than the initial locked liquidity. */
export const LIQUIDITY_POOL_ERROR__LAUNCH_LIQUIDITY_TOO_SMALL = 0x1781; // 6017
/** LpTokensCalculationFailed: Failed to calculate liquidity tokens to mint due to invalid input or overflow. */
export const LIQUIDITY_POOL_ERROR__LP_TOKENS_CALCULATION_FAILED = 0x1782; // 6018
/** AfterswapCalculationFailed: Failed to calculate afterswap state due to invalid input or overflow. */
export const LIQUIDITY_POOL_ERROR__AFTERSWAP_CALCULATION_FAILED = 0x1783; // 6019
/** WithdrawLiquidityCalculationFailed: Failed to calculate withdraw liquidity due to invalid input or overflow. */
export const LIQUIDITY_POOL_ERROR__WITHDRAW_LIQUIDITY_CALCULATION_FAILED = 0x1784; // 6020
/** SwapResultIsZero: Swap result is zero. */
export const LIQUIDITY_POOL_ERROR__SWAP_RESULT_IS_ZERO = 0x1785; // 6021
/** SwapFeesAreZero: Swap fees are zero */
export const LIQUIDITY_POOL_ERROR__SWAP_FEES_ARE_ZERO = 0x1786; // 6022
/** SwapSlippageExceeded: Calculated slippage exceeds allowed tolerance. */
export const LIQUIDITY_POOL_ERROR__SWAP_SLIPPAGE_EXCEEDED = 0x1787; // 6023
/** ProvideOverflowError: Overflow error when providing liquidity. */
export const LIQUIDITY_POOL_ERROR__PROVIDE_OVERFLOW_ERROR = 0x1788; // 6024
/** WithdrawOverflowError: Overflow error when withdrawing liquidity. */
export const LIQUIDITY_POOL_ERROR__WITHDRAW_OVERFLOW_ERROR = 0x1789; // 6025
/** SwapOverflowError: Overflow error when swapping. */
export const LIQUIDITY_POOL_ERROR__SWAP_OVERFLOW_ERROR = 0x178a; // 6026
/** ProvidersFeesIsZero: Protocol fees to redeem is zero */
export const LIQUIDITY_POOL_ERROR__PROVIDERS_FEES_IS_ZERO = 0x178b; // 6027
/** BaseQuoteRatioCalculationFailed: Failed to calculate base-to-quote liquidity ratio due to invalid input or overflow. */
export const LIQUIDITY_POOL_ERROR__BASE_QUOTE_RATIO_CALCULATION_FAILED = 0x178c; // 6028
/** ConstantProductCalculationFailed: Failed to calculate constant product due to invalid input or overflow. */
export const LIQUIDITY_POOL_ERROR__CONSTANT_PRODUCT_CALCULATION_FAILED = 0x178d; // 6029
/** ConstantProductToleranceExceeded: Constant product tolerance exceeded. */
export const LIQUIDITY_POOL_ERROR__CONSTANT_PRODUCT_TOLERANCE_EXCEEDED = 0x178e; // 6030
/** LiquidityRatioToleranceExceeded: Liquidity ratio tolerance exceeded. */
export const LIQUIDITY_POOL_ERROR__LIQUIDITY_RATIO_TOLERANCE_EXCEEDED = 0x178f; // 6031

export type LiquidityPoolError =
  | typeof LIQUIDITY_POOL_ERROR__AFTERSWAP_CALCULATION_FAILED
  | typeof LIQUIDITY_POOL_ERROR__BASE_LIQUIDITY_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__BASE_QUOTE_RATIO_CALCULATION_FAILED
  | typeof LIQUIDITY_POOL_ERROR__CONFIG_FEE_RATE_EXCEEDED
  | typeof LIQUIDITY_POOL_ERROR__CONSTANT_PRODUCT_CALCULATION_FAILED
  | typeof LIQUIDITY_POOL_ERROR__CONSTANT_PRODUCT_TOLERANCE_EXCEEDED
  | typeof LIQUIDITY_POOL_ERROR__CP_AMM_ALREADY_INITIALIZED
  | typeof LIQUIDITY_POOL_ERROR__CP_AMM_ALREADY_LAUNCHED
  | typeof LIQUIDITY_POOL_ERROR__CP_AMM_NOT_INITIALIZED
  | typeof LIQUIDITY_POOL_ERROR__CP_AMM_NOT_LAUNCHED
  | typeof LIQUIDITY_POOL_ERROR__ESTIMATED_RESULT_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__INSUFFICIENT_BASE_LIQUIDITY
  | typeof LIQUIDITY_POOL_ERROR__INSUFFICIENT_QUOTE_LIQUIDITY
  | typeof LIQUIDITY_POOL_ERROR__INVALID_CP_AMM_VAULT_ADDRESS
  | typeof LIQUIDITY_POOL_ERROR__INVALID_CP_AMM_VAULT_OWNER
  | typeof LIQUIDITY_POOL_ERROR__LAUNCH_LIQUIDITY_TOO_SMALL
  | typeof LIQUIDITY_POOL_ERROR__LIQUIDITY_RATIO_TOLERANCE_EXCEEDED
  | typeof LIQUIDITY_POOL_ERROR__LP_TOKENS_CALCULATION_FAILED
  | typeof LIQUIDITY_POOL_ERROR__LP_TOKENS_SUPPLY_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__PROVIDED_BASE_LIQUIDITY_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__PROVIDED_LP_TOKENS_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__PROVIDED_QUOTE_LIQUIDITY_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__PROVIDE_OVERFLOW_ERROR
  | typeof LIQUIDITY_POOL_ERROR__PROVIDERS_FEES_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__QUOTE_LIQUIDITY_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__SWAP_AMOUNT_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__SWAP_FEES_ARE_ZERO
  | typeof LIQUIDITY_POOL_ERROR__SWAP_OVERFLOW_ERROR
  | typeof LIQUIDITY_POOL_ERROR__SWAP_RESULT_IS_ZERO
  | typeof LIQUIDITY_POOL_ERROR__SWAP_SLIPPAGE_EXCEEDED
  | typeof LIQUIDITY_POOL_ERROR__WITHDRAW_LIQUIDITY_CALCULATION_FAILED
  | typeof LIQUIDITY_POOL_ERROR__WITHDRAW_OVERFLOW_ERROR;

let liquidityPoolErrorMessages: Record<LiquidityPoolError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  liquidityPoolErrorMessages = {
    [LIQUIDITY_POOL_ERROR__AFTERSWAP_CALCULATION_FAILED]: `Failed to calculate afterswap state due to invalid input or overflow.`,
    [LIQUIDITY_POOL_ERROR__BASE_LIQUIDITY_IS_ZERO]: `Base liquidity is zero.`,
    [LIQUIDITY_POOL_ERROR__BASE_QUOTE_RATIO_CALCULATION_FAILED]: `Failed to calculate base-to-quote liquidity ratio due to invalid input or overflow.`,
    [LIQUIDITY_POOL_ERROR__CONFIG_FEE_RATE_EXCEEDED]: `The provided fee rate for AmmsConfig exceeds the maximum allowed value of 10000 basis points (100%).`,
    [LIQUIDITY_POOL_ERROR__CONSTANT_PRODUCT_CALCULATION_FAILED]: `Failed to calculate constant product due to invalid input or overflow.`,
    [LIQUIDITY_POOL_ERROR__CONSTANT_PRODUCT_TOLERANCE_EXCEEDED]: `Constant product tolerance exceeded.`,
    [LIQUIDITY_POOL_ERROR__CP_AMM_ALREADY_INITIALIZED]: `CpAmm is already initialized.`,
    [LIQUIDITY_POOL_ERROR__CP_AMM_ALREADY_LAUNCHED]: `CpAmm is already launched.`,
    [LIQUIDITY_POOL_ERROR__CP_AMM_NOT_INITIALIZED]: `CpAmm is not initialized.`,
    [LIQUIDITY_POOL_ERROR__CP_AMM_NOT_LAUNCHED]: `CpAmm is not launched.`,
    [LIQUIDITY_POOL_ERROR__ESTIMATED_RESULT_IS_ZERO]: `Estimated swap result cannot be zero.`,
    [LIQUIDITY_POOL_ERROR__INSUFFICIENT_BASE_LIQUIDITY]: `Base liquidity is less then minimal operable liquidity.`,
    [LIQUIDITY_POOL_ERROR__INSUFFICIENT_QUOTE_LIQUIDITY]: `Quote liquidity is less then minimal operable liquidity.`,
    [LIQUIDITY_POOL_ERROR__INVALID_CP_AMM_VAULT_ADDRESS]: `Invalid CpAmm vault address: expected associated token account does not match.`,
    [LIQUIDITY_POOL_ERROR__INVALID_CP_AMM_VAULT_OWNER]: `CpAmm vault owner mismatch: the vault is not owned by the expected program.`,
    [LIQUIDITY_POOL_ERROR__LAUNCH_LIQUIDITY_TOO_SMALL]: `Launch liquidity must be at least 4 times greater than the initial locked liquidity.`,
    [LIQUIDITY_POOL_ERROR__LIQUIDITY_RATIO_TOLERANCE_EXCEEDED]: `Liquidity ratio tolerance exceeded.`,
    [LIQUIDITY_POOL_ERROR__LP_TOKENS_CALCULATION_FAILED]: `Failed to calculate liquidity tokens to mint due to invalid input or overflow.`,
    [LIQUIDITY_POOL_ERROR__LP_TOKENS_SUPPLY_IS_ZERO]: `Liquidity tokens supply is zero.`,
    [LIQUIDITY_POOL_ERROR__PROVIDED_BASE_LIQUIDITY_IS_ZERO]: `Provided base liquidity is zero.`,
    [LIQUIDITY_POOL_ERROR__PROVIDED_LP_TOKENS_IS_ZERO]: `Provided liquidity tokens are zero.`,
    [LIQUIDITY_POOL_ERROR__PROVIDED_QUOTE_LIQUIDITY_IS_ZERO]: `Provided quote liquidity is zero.`,
    [LIQUIDITY_POOL_ERROR__PROVIDE_OVERFLOW_ERROR]: `Overflow error when providing liquidity.`,
    [LIQUIDITY_POOL_ERROR__PROVIDERS_FEES_IS_ZERO]: `Protocol fees to redeem is zero`,
    [LIQUIDITY_POOL_ERROR__QUOTE_LIQUIDITY_IS_ZERO]: `Quote liquidity is zero.`,
    [LIQUIDITY_POOL_ERROR__SWAP_AMOUNT_IS_ZERO]: `Swap amount cannot be zero.`,
    [LIQUIDITY_POOL_ERROR__SWAP_FEES_ARE_ZERO]: `Swap fees are zero`,
    [LIQUIDITY_POOL_ERROR__SWAP_OVERFLOW_ERROR]: `Overflow error when swapping.`,
    [LIQUIDITY_POOL_ERROR__SWAP_RESULT_IS_ZERO]: `Swap result is zero.`,
    [LIQUIDITY_POOL_ERROR__SWAP_SLIPPAGE_EXCEEDED]: `Calculated slippage exceeds allowed tolerance.`,
    [LIQUIDITY_POOL_ERROR__WITHDRAW_LIQUIDITY_CALCULATION_FAILED]: `Failed to calculate withdraw liquidity due to invalid input or overflow.`,
    [LIQUIDITY_POOL_ERROR__WITHDRAW_OVERFLOW_ERROR]: `Overflow error when withdrawing liquidity.`,
  };
}

export function getLiquidityPoolErrorMessage(code: LiquidityPoolError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (liquidityPoolErrorMessages as Record<LiquidityPoolError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isLiquidityPoolError<
  TProgramErrorCode extends LiquidityPoolError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    LIQUIDITY_POOL_PROGRAM_ADDRESS,
    code
  );
}
