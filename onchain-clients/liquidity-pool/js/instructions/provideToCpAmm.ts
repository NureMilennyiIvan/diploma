/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LIQUIDITY_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PROVIDE_TO_CP_AMM_DISCRIMINATOR = new Uint8Array([
  228, 147, 253, 251, 242, 255, 110, 245,
]);

export function getProvideToCpAmmDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROVIDE_TO_CP_AMM_DISCRIMINATOR
  );
}

export type ProvideToCpAmmInstruction<
  TProgram extends string = typeof LIQUIDITY_POOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountSignerBaseAccount extends string | IAccountMeta<string> = string,
  TAccountSignerQuoteAccount extends string | IAccountMeta<string> = string,
  TAccountSignerLpAccount extends string | IAccountMeta<string> = string,
  TAccountAmmsConfig extends string | IAccountMeta<string> = string,
  TAccountCpAmm extends string | IAccountMeta<string> = string,
  TAccountCpAmmBaseVault extends string | IAccountMeta<string> = string,
  TAccountCpAmmQuoteVault extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountLpTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountBaseTokenProgram extends string | IAccountMeta<string> = string,
  TAccountQuoteTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountSignerBaseAccount extends string
        ? WritableAccount<TAccountSignerBaseAccount>
        : TAccountSignerBaseAccount,
      TAccountSignerQuoteAccount extends string
        ? WritableAccount<TAccountSignerQuoteAccount>
        : TAccountSignerQuoteAccount,
      TAccountSignerLpAccount extends string
        ? WritableAccount<TAccountSignerLpAccount>
        : TAccountSignerLpAccount,
      TAccountAmmsConfig extends string
        ? ReadonlyAccount<TAccountAmmsConfig>
        : TAccountAmmsConfig,
      TAccountCpAmm extends string
        ? WritableAccount<TAccountCpAmm>
        : TAccountCpAmm,
      TAccountCpAmmBaseVault extends string
        ? WritableAccount<TAccountCpAmmBaseVault>
        : TAccountCpAmmBaseVault,
      TAccountCpAmmQuoteVault extends string
        ? WritableAccount<TAccountCpAmmQuoteVault>
        : TAccountCpAmmQuoteVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountLpTokenProgram extends string
        ? ReadonlyAccount<TAccountLpTokenProgram>
        : TAccountLpTokenProgram,
      TAccountBaseTokenProgram extends string
        ? ReadonlyAccount<TAccountBaseTokenProgram>
        : TAccountBaseTokenProgram,
      TAccountQuoteTokenProgram extends string
        ? ReadonlyAccount<TAccountQuoteTokenProgram>
        : TAccountQuoteTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProvideToCpAmmInstructionData = {
  discriminator: ReadonlyUint8Array;
  baseLiquidity: bigint;
  quoteLiquidity: bigint;
};

export type ProvideToCpAmmInstructionDataArgs = {
  baseLiquidity: number | bigint;
  quoteLiquidity: number | bigint;
};

export function getProvideToCpAmmInstructionDataEncoder(): Encoder<ProvideToCpAmmInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseLiquidity', getU64Encoder()],
      ['quoteLiquidity', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PROVIDE_TO_CP_AMM_DISCRIMINATOR })
  );
}

export function getProvideToCpAmmInstructionDataDecoder(): Decoder<ProvideToCpAmmInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseLiquidity', getU64Decoder()],
    ['quoteLiquidity', getU64Decoder()],
  ]);
}

export function getProvideToCpAmmInstructionDataCodec(): Codec<
  ProvideToCpAmmInstructionDataArgs,
  ProvideToCpAmmInstructionData
> {
  return combineCodec(
    getProvideToCpAmmInstructionDataEncoder(),
    getProvideToCpAmmInstructionDataDecoder()
  );
}

export type ProvideToCpAmmAsyncInput<
  TAccountSigner extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountSignerBaseAccount extends string = string,
  TAccountSignerQuoteAccount extends string = string,
  TAccountSignerLpAccount extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountCpAmmBaseVault extends string = string,
  TAccountCpAmmQuoteVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountLpTokenProgram extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  lpMint: Address<TAccountLpMint>;
  signerBaseAccount: Address<TAccountSignerBaseAccount>;
  signerQuoteAccount: Address<TAccountSignerQuoteAccount>;
  signerLpAccount?: Address<TAccountSignerLpAccount>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  cpAmmBaseVault?: Address<TAccountCpAmmBaseVault>;
  cpAmmQuoteVault?: Address<TAccountCpAmmQuoteVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  lpTokenProgram?: Address<TAccountLpTokenProgram>;
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  baseLiquidity: ProvideToCpAmmInstructionDataArgs['baseLiquidity'];
  quoteLiquidity: ProvideToCpAmmInstructionDataArgs['quoteLiquidity'];
};

export async function getProvideToCpAmmInstructionAsync<
  TAccountSigner extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountSignerBaseAccount extends string,
  TAccountSignerQuoteAccount extends string,
  TAccountSignerLpAccount extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountCpAmmBaseVault extends string,
  TAccountCpAmmQuoteVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountLpTokenProgram extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_POOL_PROGRAM_ADDRESS,
>(
  input: ProvideToCpAmmAsyncInput<
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountSignerLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ProvideToCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountSignerLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    signerBaseAccount: {
      value: input.signerBaseAccount ?? null,
      isWritable: true,
    },
    signerQuoteAccount: {
      value: input.signerQuoteAccount ?? null,
      isWritable: true,
    },
    signerLpAccount: { value: input.signerLpAccount ?? null, isWritable: true },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    cpAmmBaseVault: { value: input.cpAmmBaseVault ?? null, isWritable: true },
    cpAmmQuoteVault: { value: input.cpAmmQuoteVault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    lpTokenProgram: { value: input.lpTokenProgram ?? null, isWritable: false },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.lpTokenProgram.value) {
    accounts.lpTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.signerLpAccount.value) {
    accounts.signerLpAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.lpTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.lpMint.value)),
      ],
    });
  }
  if (!accounts.cpAmmBaseVault.value) {
    accounts.cpAmmBaseVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.cpAmm.value)),
        getAddressEncoder().encode(expectAddress(accounts.cpAmm.value)),
      ],
    });
  }
  if (!accounts.cpAmmQuoteVault.value) {
    accounts.cpAmmQuoteVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.cpAmm.value)),
        getAddressEncoder().encode(expectAddress(accounts.cpAmm.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.signerBaseAccount),
      getAccountMeta(accounts.signerQuoteAccount),
      getAccountMeta(accounts.signerLpAccount),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.cpAmmBaseVault),
      getAccountMeta(accounts.cpAmmQuoteVault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.lpTokenProgram),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getProvideToCpAmmInstructionDataEncoder().encode(
      args as ProvideToCpAmmInstructionDataArgs
    ),
  } as ProvideToCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountSignerLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ProvideToCpAmmInput<
  TAccountSigner extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountSignerBaseAccount extends string = string,
  TAccountSignerQuoteAccount extends string = string,
  TAccountSignerLpAccount extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountCpAmmBaseVault extends string = string,
  TAccountCpAmmQuoteVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountLpTokenProgram extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  lpMint: Address<TAccountLpMint>;
  signerBaseAccount: Address<TAccountSignerBaseAccount>;
  signerQuoteAccount: Address<TAccountSignerQuoteAccount>;
  signerLpAccount: Address<TAccountSignerLpAccount>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  cpAmmBaseVault: Address<TAccountCpAmmBaseVault>;
  cpAmmQuoteVault: Address<TAccountCpAmmQuoteVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  lpTokenProgram?: Address<TAccountLpTokenProgram>;
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  baseLiquidity: ProvideToCpAmmInstructionDataArgs['baseLiquidity'];
  quoteLiquidity: ProvideToCpAmmInstructionDataArgs['quoteLiquidity'];
};

export function getProvideToCpAmmInstruction<
  TAccountSigner extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountSignerBaseAccount extends string,
  TAccountSignerQuoteAccount extends string,
  TAccountSignerLpAccount extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountCpAmmBaseVault extends string,
  TAccountCpAmmQuoteVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountLpTokenProgram extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_POOL_PROGRAM_ADDRESS,
>(
  input: ProvideToCpAmmInput<
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountSignerLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ProvideToCpAmmInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountLpMint,
  TAccountSignerBaseAccount,
  TAccountSignerQuoteAccount,
  TAccountSignerLpAccount,
  TAccountAmmsConfig,
  TAccountCpAmm,
  TAccountCpAmmBaseVault,
  TAccountCpAmmQuoteVault,
  TAccountAssociatedTokenProgram,
  TAccountLpTokenProgram,
  TAccountBaseTokenProgram,
  TAccountQuoteTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    signerBaseAccount: {
      value: input.signerBaseAccount ?? null,
      isWritable: true,
    },
    signerQuoteAccount: {
      value: input.signerQuoteAccount ?? null,
      isWritable: true,
    },
    signerLpAccount: { value: input.signerLpAccount ?? null, isWritable: true },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    cpAmmBaseVault: { value: input.cpAmmBaseVault ?? null, isWritable: true },
    cpAmmQuoteVault: { value: input.cpAmmQuoteVault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    lpTokenProgram: { value: input.lpTokenProgram ?? null, isWritable: false },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.lpTokenProgram.value) {
    accounts.lpTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.signerBaseAccount),
      getAccountMeta(accounts.signerQuoteAccount),
      getAccountMeta(accounts.signerLpAccount),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.cpAmmBaseVault),
      getAccountMeta(accounts.cpAmmQuoteVault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.lpTokenProgram),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getProvideToCpAmmInstructionDataEncoder().encode(
      args as ProvideToCpAmmInstructionDataArgs
    ),
  } as ProvideToCpAmmInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountSignerBaseAccount,
    TAccountSignerQuoteAccount,
    TAccountSignerLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountAssociatedTokenProgram,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedProvideToCpAmmInstruction<
  TProgram extends string = typeof LIQUIDITY_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    baseMint: TAccountMetas[1];
    quoteMint: TAccountMetas[2];
    lpMint: TAccountMetas[3];
    signerBaseAccount: TAccountMetas[4];
    signerQuoteAccount: TAccountMetas[5];
    signerLpAccount: TAccountMetas[6];
    ammsConfig: TAccountMetas[7];
    cpAmm: TAccountMetas[8];
    cpAmmBaseVault: TAccountMetas[9];
    cpAmmQuoteVault: TAccountMetas[10];
    associatedTokenProgram: TAccountMetas[11];
    lpTokenProgram: TAccountMetas[12];
    baseTokenProgram: TAccountMetas[13];
    quoteTokenProgram: TAccountMetas[14];
    systemProgram: TAccountMetas[15];
  };
  data: ProvideToCpAmmInstructionData;
};

export function parseProvideToCpAmmInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedProvideToCpAmmInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      lpMint: getNextAccount(),
      signerBaseAccount: getNextAccount(),
      signerQuoteAccount: getNextAccount(),
      signerLpAccount: getNextAccount(),
      ammsConfig: getNextAccount(),
      cpAmm: getNextAccount(),
      cpAmmBaseVault: getNextAccount(),
      cpAmmQuoteVault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      lpTokenProgram: getNextAccount(),
      baseTokenProgram: getNextAccount(),
      quoteTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getProvideToCpAmmInstructionDataDecoder().decode(instruction.data),
  };
}
