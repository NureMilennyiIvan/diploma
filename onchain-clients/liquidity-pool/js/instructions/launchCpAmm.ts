/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LIQUIDITY_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const LAUNCH_CP_AMM_DISCRIMINATOR = new Uint8Array([
  205, 161, 177, 76, 92, 218, 37, 101,
]);

export function getLaunchCpAmmDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LAUNCH_CP_AMM_DISCRIMINATOR
  );
}

export type LaunchCpAmmInstruction<
  TProgram extends string = typeof LIQUIDITY_POOL_PROGRAM_ADDRESS,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountBaseMint extends string | IAccountMeta<string> = string,
  TAccountQuoteMint extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountCreatorBaseAccount extends string | IAccountMeta<string> = string,
  TAccountCreatorQuoteAccount extends string | IAccountMeta<string> = string,
  TAccountCreatorLpAccount extends string | IAccountMeta<string> = string,
  TAccountAmmsConfig extends string | IAccountMeta<string> = string,
  TAccountCpAmm extends string | IAccountMeta<string> = string,
  TAccountCpAmmBaseVault extends string | IAccountMeta<string> = string,
  TAccountCpAmmQuoteVault extends string | IAccountMeta<string> = string,
  TAccountCpAmmLockedLpVault extends string | IAccountMeta<string> = string,
  TAccountLpTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountBaseTokenProgram extends string | IAccountMeta<string> = string,
  TAccountQuoteTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountBaseMint extends string
        ? ReadonlyAccount<TAccountBaseMint>
        : TAccountBaseMint,
      TAccountQuoteMint extends string
        ? ReadonlyAccount<TAccountQuoteMint>
        : TAccountQuoteMint,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountCreatorBaseAccount extends string
        ? WritableAccount<TAccountCreatorBaseAccount>
        : TAccountCreatorBaseAccount,
      TAccountCreatorQuoteAccount extends string
        ? WritableAccount<TAccountCreatorQuoteAccount>
        : TAccountCreatorQuoteAccount,
      TAccountCreatorLpAccount extends string
        ? WritableAccount<TAccountCreatorLpAccount>
        : TAccountCreatorLpAccount,
      TAccountAmmsConfig extends string
        ? ReadonlyAccount<TAccountAmmsConfig>
        : TAccountAmmsConfig,
      TAccountCpAmm extends string
        ? WritableAccount<TAccountCpAmm>
        : TAccountCpAmm,
      TAccountCpAmmBaseVault extends string
        ? WritableAccount<TAccountCpAmmBaseVault>
        : TAccountCpAmmBaseVault,
      TAccountCpAmmQuoteVault extends string
        ? WritableAccount<TAccountCpAmmQuoteVault>
        : TAccountCpAmmQuoteVault,
      TAccountCpAmmLockedLpVault extends string
        ? WritableAccount<TAccountCpAmmLockedLpVault>
        : TAccountCpAmmLockedLpVault,
      TAccountLpTokenProgram extends string
        ? ReadonlyAccount<TAccountLpTokenProgram>
        : TAccountLpTokenProgram,
      TAccountBaseTokenProgram extends string
        ? ReadonlyAccount<TAccountBaseTokenProgram>
        : TAccountBaseTokenProgram,
      TAccountQuoteTokenProgram extends string
        ? ReadonlyAccount<TAccountQuoteTokenProgram>
        : TAccountQuoteTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LaunchCpAmmInstructionData = {
  discriminator: ReadonlyUint8Array;
  baseLiquidity: bigint;
  quoteLiquidity: bigint;
};

export type LaunchCpAmmInstructionDataArgs = {
  baseLiquidity: number | bigint;
  quoteLiquidity: number | bigint;
};

export function getLaunchCpAmmInstructionDataEncoder(): Encoder<LaunchCpAmmInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseLiquidity', getU64Encoder()],
      ['quoteLiquidity', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LAUNCH_CP_AMM_DISCRIMINATOR })
  );
}

export function getLaunchCpAmmInstructionDataDecoder(): Decoder<LaunchCpAmmInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseLiquidity', getU64Decoder()],
    ['quoteLiquidity', getU64Decoder()],
  ]);
}

export function getLaunchCpAmmInstructionDataCodec(): Codec<
  LaunchCpAmmInstructionDataArgs,
  LaunchCpAmmInstructionData
> {
  return combineCodec(
    getLaunchCpAmmInstructionDataEncoder(),
    getLaunchCpAmmInstructionDataDecoder()
  );
}

export type LaunchCpAmmAsyncInput<
  TAccountCreator extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountCreatorBaseAccount extends string = string,
  TAccountCreatorQuoteAccount extends string = string,
  TAccountCreatorLpAccount extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountCpAmmBaseVault extends string = string,
  TAccountCpAmmQuoteVault extends string = string,
  TAccountCpAmmLockedLpVault extends string = string,
  TAccountLpTokenProgram extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  lpMint: Address<TAccountLpMint>;
  creatorBaseAccount: Address<TAccountCreatorBaseAccount>;
  creatorQuoteAccount: Address<TAccountCreatorQuoteAccount>;
  creatorLpAccount?: Address<TAccountCreatorLpAccount>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  cpAmmBaseVault?: Address<TAccountCpAmmBaseVault>;
  cpAmmQuoteVault?: Address<TAccountCpAmmQuoteVault>;
  cpAmmLockedLpVault: Address<TAccountCpAmmLockedLpVault>;
  lpTokenProgram?: Address<TAccountLpTokenProgram>;
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  baseLiquidity: LaunchCpAmmInstructionDataArgs['baseLiquidity'];
  quoteLiquidity: LaunchCpAmmInstructionDataArgs['quoteLiquidity'];
};

export async function getLaunchCpAmmInstructionAsync<
  TAccountCreator extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountCreatorBaseAccount extends string,
  TAccountCreatorQuoteAccount extends string,
  TAccountCreatorLpAccount extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountCpAmmBaseVault extends string,
  TAccountCpAmmQuoteVault extends string,
  TAccountCpAmmLockedLpVault extends string,
  TAccountLpTokenProgram extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_POOL_PROGRAM_ADDRESS,
>(
  input: LaunchCpAmmAsyncInput<
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountCreatorBaseAccount,
    TAccountCreatorQuoteAccount,
    TAccountCreatorLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountCpAmmLockedLpVault,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  LaunchCpAmmInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountCreatorBaseAccount,
    TAccountCreatorQuoteAccount,
    TAccountCreatorLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountCpAmmLockedLpVault,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    creatorBaseAccount: {
      value: input.creatorBaseAccount ?? null,
      isWritable: true,
    },
    creatorQuoteAccount: {
      value: input.creatorQuoteAccount ?? null,
      isWritable: true,
    },
    creatorLpAccount: {
      value: input.creatorLpAccount ?? null,
      isWritable: true,
    },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    cpAmmBaseVault: { value: input.cpAmmBaseVault ?? null, isWritable: true },
    cpAmmQuoteVault: { value: input.cpAmmQuoteVault ?? null, isWritable: true },
    cpAmmLockedLpVault: {
      value: input.cpAmmLockedLpVault ?? null,
      isWritable: true,
    },
    lpTokenProgram: { value: input.lpTokenProgram ?? null, isWritable: false },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.lpTokenProgram.value) {
    accounts.lpTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.creatorLpAccount.value) {
    accounts.creatorLpAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.lpTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.lpMint.value)),
      ],
    });
  }
  if (!accounts.cpAmmBaseVault.value) {
    accounts.cpAmmBaseVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.cpAmm.value)),
        getAddressEncoder().encode(expectAddress(accounts.cpAmm.value)),
      ],
    });
  }
  if (!accounts.cpAmmQuoteVault.value) {
    accounts.cpAmmQuoteVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.cpAmm.value)),
        getAddressEncoder().encode(expectAddress(accounts.cpAmm.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.creatorBaseAccount),
      getAccountMeta(accounts.creatorQuoteAccount),
      getAccountMeta(accounts.creatorLpAccount),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.cpAmmBaseVault),
      getAccountMeta(accounts.cpAmmQuoteVault),
      getAccountMeta(accounts.cpAmmLockedLpVault),
      getAccountMeta(accounts.lpTokenProgram),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getLaunchCpAmmInstructionDataEncoder().encode(
      args as LaunchCpAmmInstructionDataArgs
    ),
  } as LaunchCpAmmInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountCreatorBaseAccount,
    TAccountCreatorQuoteAccount,
    TAccountCreatorLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountCpAmmLockedLpVault,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type LaunchCpAmmInput<
  TAccountCreator extends string = string,
  TAccountBaseMint extends string = string,
  TAccountQuoteMint extends string = string,
  TAccountLpMint extends string = string,
  TAccountCreatorBaseAccount extends string = string,
  TAccountCreatorQuoteAccount extends string = string,
  TAccountCreatorLpAccount extends string = string,
  TAccountAmmsConfig extends string = string,
  TAccountCpAmm extends string = string,
  TAccountCpAmmBaseVault extends string = string,
  TAccountCpAmmQuoteVault extends string = string,
  TAccountCpAmmLockedLpVault extends string = string,
  TAccountLpTokenProgram extends string = string,
  TAccountBaseTokenProgram extends string = string,
  TAccountQuoteTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  baseMint: Address<TAccountBaseMint>;
  quoteMint: Address<TAccountQuoteMint>;
  lpMint: Address<TAccountLpMint>;
  creatorBaseAccount: Address<TAccountCreatorBaseAccount>;
  creatorQuoteAccount: Address<TAccountCreatorQuoteAccount>;
  creatorLpAccount: Address<TAccountCreatorLpAccount>;
  ammsConfig: Address<TAccountAmmsConfig>;
  cpAmm: Address<TAccountCpAmm>;
  cpAmmBaseVault: Address<TAccountCpAmmBaseVault>;
  cpAmmQuoteVault: Address<TAccountCpAmmQuoteVault>;
  cpAmmLockedLpVault: Address<TAccountCpAmmLockedLpVault>;
  lpTokenProgram?: Address<TAccountLpTokenProgram>;
  baseTokenProgram: Address<TAccountBaseTokenProgram>;
  quoteTokenProgram: Address<TAccountQuoteTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  baseLiquidity: LaunchCpAmmInstructionDataArgs['baseLiquidity'];
  quoteLiquidity: LaunchCpAmmInstructionDataArgs['quoteLiquidity'];
};

export function getLaunchCpAmmInstruction<
  TAccountCreator extends string,
  TAccountBaseMint extends string,
  TAccountQuoteMint extends string,
  TAccountLpMint extends string,
  TAccountCreatorBaseAccount extends string,
  TAccountCreatorQuoteAccount extends string,
  TAccountCreatorLpAccount extends string,
  TAccountAmmsConfig extends string,
  TAccountCpAmm extends string,
  TAccountCpAmmBaseVault extends string,
  TAccountCpAmmQuoteVault extends string,
  TAccountCpAmmLockedLpVault extends string,
  TAccountLpTokenProgram extends string,
  TAccountBaseTokenProgram extends string,
  TAccountQuoteTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LIQUIDITY_POOL_PROGRAM_ADDRESS,
>(
  input: LaunchCpAmmInput<
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountCreatorBaseAccount,
    TAccountCreatorQuoteAccount,
    TAccountCreatorLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountCpAmmLockedLpVault,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): LaunchCpAmmInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountBaseMint,
  TAccountQuoteMint,
  TAccountLpMint,
  TAccountCreatorBaseAccount,
  TAccountCreatorQuoteAccount,
  TAccountCreatorLpAccount,
  TAccountAmmsConfig,
  TAccountCpAmm,
  TAccountCpAmmBaseVault,
  TAccountCpAmmQuoteVault,
  TAccountCpAmmLockedLpVault,
  TAccountLpTokenProgram,
  TAccountBaseTokenProgram,
  TAccountQuoteTokenProgram,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LIQUIDITY_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    baseMint: { value: input.baseMint ?? null, isWritable: false },
    quoteMint: { value: input.quoteMint ?? null, isWritable: false },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    creatorBaseAccount: {
      value: input.creatorBaseAccount ?? null,
      isWritable: true,
    },
    creatorQuoteAccount: {
      value: input.creatorQuoteAccount ?? null,
      isWritable: true,
    },
    creatorLpAccount: {
      value: input.creatorLpAccount ?? null,
      isWritable: true,
    },
    ammsConfig: { value: input.ammsConfig ?? null, isWritable: false },
    cpAmm: { value: input.cpAmm ?? null, isWritable: true },
    cpAmmBaseVault: { value: input.cpAmmBaseVault ?? null, isWritable: true },
    cpAmmQuoteVault: { value: input.cpAmmQuoteVault ?? null, isWritable: true },
    cpAmmLockedLpVault: {
      value: input.cpAmmLockedLpVault ?? null,
      isWritable: true,
    },
    lpTokenProgram: { value: input.lpTokenProgram ?? null, isWritable: false },
    baseTokenProgram: {
      value: input.baseTokenProgram ?? null,
      isWritable: false,
    },
    quoteTokenProgram: {
      value: input.quoteTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.lpTokenProgram.value) {
    accounts.lpTokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.baseMint),
      getAccountMeta(accounts.quoteMint),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.creatorBaseAccount),
      getAccountMeta(accounts.creatorQuoteAccount),
      getAccountMeta(accounts.creatorLpAccount),
      getAccountMeta(accounts.ammsConfig),
      getAccountMeta(accounts.cpAmm),
      getAccountMeta(accounts.cpAmmBaseVault),
      getAccountMeta(accounts.cpAmmQuoteVault),
      getAccountMeta(accounts.cpAmmLockedLpVault),
      getAccountMeta(accounts.lpTokenProgram),
      getAccountMeta(accounts.baseTokenProgram),
      getAccountMeta(accounts.quoteTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getLaunchCpAmmInstructionDataEncoder().encode(
      args as LaunchCpAmmInstructionDataArgs
    ),
  } as LaunchCpAmmInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountBaseMint,
    TAccountQuoteMint,
    TAccountLpMint,
    TAccountCreatorBaseAccount,
    TAccountCreatorQuoteAccount,
    TAccountCreatorLpAccount,
    TAccountAmmsConfig,
    TAccountCpAmm,
    TAccountCpAmmBaseVault,
    TAccountCpAmmQuoteVault,
    TAccountCpAmmLockedLpVault,
    TAccountLpTokenProgram,
    TAccountBaseTokenProgram,
    TAccountQuoteTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedLaunchCpAmmInstruction<
  TProgram extends string = typeof LIQUIDITY_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    baseMint: TAccountMetas[1];
    quoteMint: TAccountMetas[2];
    lpMint: TAccountMetas[3];
    creatorBaseAccount: TAccountMetas[4];
    creatorQuoteAccount: TAccountMetas[5];
    creatorLpAccount: TAccountMetas[6];
    ammsConfig: TAccountMetas[7];
    cpAmm: TAccountMetas[8];
    cpAmmBaseVault: TAccountMetas[9];
    cpAmmQuoteVault: TAccountMetas[10];
    cpAmmLockedLpVault: TAccountMetas[11];
    lpTokenProgram: TAccountMetas[12];
    baseTokenProgram: TAccountMetas[13];
    quoteTokenProgram: TAccountMetas[14];
    systemProgram: TAccountMetas[15];
    associatedTokenProgram: TAccountMetas[16];
  };
  data: LaunchCpAmmInstructionData;
};

export function parseLaunchCpAmmInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedLaunchCpAmmInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 17) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      baseMint: getNextAccount(),
      quoteMint: getNextAccount(),
      lpMint: getNextAccount(),
      creatorBaseAccount: getNextAccount(),
      creatorQuoteAccount: getNextAccount(),
      creatorLpAccount: getNextAccount(),
      ammsConfig: getNextAccount(),
      cpAmm: getNextAccount(),
      cpAmmBaseVault: getNextAccount(),
      cpAmmQuoteVault: getNextAccount(),
      cpAmmLockedLpVault: getNextAccount(),
      lpTokenProgram: getNextAccount(),
      baseTokenProgram: getNextAccount(),
      quoteTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getLaunchCpAmmInstructionDataDecoder().decode(instruction.data),
  };
}
