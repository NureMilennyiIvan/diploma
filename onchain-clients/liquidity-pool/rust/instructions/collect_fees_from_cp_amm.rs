//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct CollectFeesFromCpAmm {
      
              
          pub signer: solana_program::pubkey::Pubkey,
          
              
          pub fee_authority: solana_program::pubkey::Pubkey,
          
              
          pub base_mint: solana_program::pubkey::Pubkey,
          
              
          pub quote_mint: solana_program::pubkey::Pubkey,
          
              
          pub fee_authority_base_account: solana_program::pubkey::Pubkey,
          
              
          pub fee_authority_quote_account: solana_program::pubkey::Pubkey,
          
              
          pub amms_config: solana_program::pubkey::Pubkey,
          
              
          pub cp_amm: solana_program::pubkey::Pubkey,
          
              
          pub cp_amm_base_vault: solana_program::pubkey::Pubkey,
          
              
          pub cp_amm_quote_vault: solana_program::pubkey::Pubkey,
          
              
          pub associated_token_program: solana_program::pubkey::Pubkey,
          
              
          pub base_token_program: solana_program::pubkey::Pubkey,
          
              
          pub quote_token_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl CollectFeesFromCpAmm {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(14+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.signer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_authority_base_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_authority_quote_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amms_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.cp_amm,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.cp_amm_base_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.cp_amm_quote_vault,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&CollectFeesFromCpAmmInstructionData::new()).unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::LIQUIDITY_POOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CollectFeesFromCpAmmInstructionData {
            discriminator: [u8; 8],
      }

impl CollectFeesFromCpAmmInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [54, 226, 123, 162, 0, 184, 158, 206],
                  }
  }
}

impl Default for CollectFeesFromCpAmmInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `CollectFeesFromCpAmm`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` fee_authority
          ///   2. `[]` base_mint
          ///   3. `[]` quote_mint
                ///   4. `[writable]` fee_authority_base_account
                ///   5. `[writable]` fee_authority_quote_account
          ///   6. `[]` amms_config
                ///   7. `[writable]` cp_amm
                ///   8. `[writable]` cp_amm_base_vault
                ///   9. `[writable]` cp_amm_quote_vault
                ///   10. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
          ///   11. `[]` base_token_program
          ///   12. `[]` quote_token_program
                ///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CollectFeesFromCpAmmBuilder {
            signer: Option<solana_program::pubkey::Pubkey>,
                fee_authority: Option<solana_program::pubkey::Pubkey>,
                base_mint: Option<solana_program::pubkey::Pubkey>,
                quote_mint: Option<solana_program::pubkey::Pubkey>,
                fee_authority_base_account: Option<solana_program::pubkey::Pubkey>,
                fee_authority_quote_account: Option<solana_program::pubkey::Pubkey>,
                amms_config: Option<solana_program::pubkey::Pubkey>,
                cp_amm: Option<solana_program::pubkey::Pubkey>,
                cp_amm_base_vault: Option<solana_program::pubkey::Pubkey>,
                cp_amm_quote_vault: Option<solana_program::pubkey::Pubkey>,
                associated_token_program: Option<solana_program::pubkey::Pubkey>,
                base_token_program: Option<solana_program::pubkey::Pubkey>,
                quote_token_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CollectFeesFromCpAmmBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn fee_authority(&mut self, fee_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fee_authority = Some(fee_authority);
                    self
    }
            #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.base_mint = Some(base_mint);
                    self
    }
            #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.quote_mint = Some(quote_mint);
                    self
    }
            #[inline(always)]
    pub fn fee_authority_base_account(&mut self, fee_authority_base_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fee_authority_base_account = Some(fee_authority_base_account);
                    self
    }
            #[inline(always)]
    pub fn fee_authority_quote_account(&mut self, fee_authority_quote_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fee_authority_quote_account = Some(fee_authority_quote_account);
                    self
    }
            #[inline(always)]
    pub fn amms_config(&mut self, amms_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.amms_config = Some(amms_config);
                    self
    }
            #[inline(always)]
    pub fn cp_amm(&mut self, cp_amm: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.cp_amm = Some(cp_amm);
                    self
    }
            #[inline(always)]
    pub fn cp_amm_base_vault(&mut self, cp_amm_base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.cp_amm_base_vault = Some(cp_amm_base_vault);
                    self
    }
            #[inline(always)]
    pub fn cp_amm_quote_vault(&mut self, cp_amm_quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.cp_amm_quote_vault = Some(cp_amm_quote_vault);
                    self
    }
            /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
#[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            #[inline(always)]
    pub fn base_token_program(&mut self, base_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.base_token_program = Some(base_token_program);
                    self
    }
            #[inline(always)]
    pub fn quote_token_program(&mut self, quote_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.quote_token_program = Some(quote_token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = CollectFeesFromCpAmm {
                              signer: self.signer.expect("signer is not set"),
                                        fee_authority: self.fee_authority.expect("fee_authority is not set"),
                                        base_mint: self.base_mint.expect("base_mint is not set"),
                                        quote_mint: self.quote_mint.expect("quote_mint is not set"),
                                        fee_authority_base_account: self.fee_authority_base_account.expect("fee_authority_base_account is not set"),
                                        fee_authority_quote_account: self.fee_authority_quote_account.expect("fee_authority_quote_account is not set"),
                                        amms_config: self.amms_config.expect("amms_config is not set"),
                                        cp_amm: self.cp_amm.expect("cp_amm is not set"),
                                        cp_amm_base_vault: self.cp_amm_base_vault.expect("cp_amm_base_vault is not set"),
                                        cp_amm_quote_vault: self.cp_amm_quote_vault.expect("cp_amm_quote_vault is not set"),
                                        associated_token_program: self.associated_token_program.unwrap_or(solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")),
                                        base_token_program: self.base_token_program.expect("base_token_program is not set"),
                                        quote_token_program: self.quote_token_program.expect("quote_token_program is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `collect_fees_from_cp_amm` CPI accounts.
  pub struct CollectFeesFromCpAmmCpiAccounts<'a, 'b> {
          
                    
              pub signer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub fee_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub fee_authority_base_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub fee_authority_quote_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub amms_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub cp_amm: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub cp_amm_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub cp_amm_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `collect_fees_from_cp_amm` CPI instruction.
pub struct CollectFeesFromCpAmmCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub signer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub fee_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub fee_authority_base_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub fee_authority_quote_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub amms_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub cp_amm: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub cp_amm_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub cp_amm_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> CollectFeesFromCpAmmCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: CollectFeesFromCpAmmCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              fee_authority: accounts.fee_authority,
              base_mint: accounts.base_mint,
              quote_mint: accounts.quote_mint,
              fee_authority_base_account: accounts.fee_authority_base_account,
              fee_authority_quote_account: accounts.fee_authority_quote_account,
              amms_config: accounts.amms_config,
              cp_amm: accounts.cp_amm,
              cp_amm_base_vault: accounts.cp_amm_base_vault,
              cp_amm_quote_vault: accounts.cp_amm_quote_vault,
              associated_token_program: accounts.associated_token_program,
              base_token_program: accounts.base_token_program,
              quote_token_program: accounts.quote_token_program,
              system_program: accounts.system_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(14+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_authority_base_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_authority_quote_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amms_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cp_amm.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cp_amm_base_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cp_amm_quote_vault.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&CollectFeesFromCpAmmInstructionData::new()).unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::LIQUIDITY_POOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(15 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.fee_authority.clone());
                        account_infos.push(self.base_mint.clone());
                        account_infos.push(self.quote_mint.clone());
                        account_infos.push(self.fee_authority_base_account.clone());
                        account_infos.push(self.fee_authority_quote_account.clone());
                        account_infos.push(self.amms_config.clone());
                        account_infos.push(self.cp_amm.clone());
                        account_infos.push(self.cp_amm_base_vault.clone());
                        account_infos.push(self.cp_amm_quote_vault.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.base_token_program.clone());
                        account_infos.push(self.quote_token_program.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CollectFeesFromCpAmm` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` fee_authority
          ///   2. `[]` base_mint
          ///   3. `[]` quote_mint
                ///   4. `[writable]` fee_authority_base_account
                ///   5. `[writable]` fee_authority_quote_account
          ///   6. `[]` amms_config
                ///   7. `[writable]` cp_amm
                ///   8. `[writable]` cp_amm_base_vault
                ///   9. `[writable]` cp_amm_quote_vault
          ///   10. `[]` associated_token_program
          ///   11. `[]` base_token_program
          ///   12. `[]` quote_token_program
          ///   13. `[]` system_program
#[derive(Clone, Debug)]
pub struct CollectFeesFromCpAmmCpiBuilder<'a, 'b> {
  instruction: Box<CollectFeesFromCpAmmCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CollectFeesFromCpAmmCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CollectFeesFromCpAmmCpiBuilderInstruction {
      __program: program,
              signer: None,
              fee_authority: None,
              base_mint: None,
              quote_mint: None,
              fee_authority_base_account: None,
              fee_authority_quote_account: None,
              amms_config: None,
              cp_amm: None,
              cp_amm_base_vault: None,
              cp_amm_quote_vault: None,
              associated_token_program: None,
              base_token_program: None,
              quote_token_program: None,
              system_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn fee_authority(&mut self, fee_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fee_authority = Some(fee_authority);
                    self
    }
      #[inline(always)]
    pub fn base_mint(&mut self, base_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.base_mint = Some(base_mint);
                    self
    }
      #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.quote_mint = Some(quote_mint);
                    self
    }
      #[inline(always)]
    pub fn fee_authority_base_account(&mut self, fee_authority_base_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fee_authority_base_account = Some(fee_authority_base_account);
                    self
    }
      #[inline(always)]
    pub fn fee_authority_quote_account(&mut self, fee_authority_quote_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fee_authority_quote_account = Some(fee_authority_quote_account);
                    self
    }
      #[inline(always)]
    pub fn amms_config(&mut self, amms_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.amms_config = Some(amms_config);
                    self
    }
      #[inline(always)]
    pub fn cp_amm(&mut self, cp_amm: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.cp_amm = Some(cp_amm);
                    self
    }
      #[inline(always)]
    pub fn cp_amm_base_vault(&mut self, cp_amm_base_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.cp_amm_base_vault = Some(cp_amm_base_vault);
                    self
    }
      #[inline(always)]
    pub fn cp_amm_quote_vault(&mut self, cp_amm_quote_vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.cp_amm_quote_vault = Some(cp_amm_quote_vault);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn base_token_program(&mut self, base_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.base_token_program = Some(base_token_program);
                    self
    }
      #[inline(always)]
    pub fn quote_token_program(&mut self, quote_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.quote_token_program = Some(quote_token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = CollectFeesFromCpAmmCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          fee_authority: self.instruction.fee_authority.expect("fee_authority is not set"),
                  
          base_mint: self.instruction.base_mint.expect("base_mint is not set"),
                  
          quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),
                  
          fee_authority_base_account: self.instruction.fee_authority_base_account.expect("fee_authority_base_account is not set"),
                  
          fee_authority_quote_account: self.instruction.fee_authority_quote_account.expect("fee_authority_quote_account is not set"),
                  
          amms_config: self.instruction.amms_config.expect("amms_config is not set"),
                  
          cp_amm: self.instruction.cp_amm.expect("cp_amm is not set"),
                  
          cp_amm_base_vault: self.instruction.cp_amm_base_vault.expect("cp_amm_base_vault is not set"),
                  
          cp_amm_quote_vault: self.instruction.cp_amm_quote_vault.expect("cp_amm_quote_vault is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          base_token_program: self.instruction.base_token_program.expect("base_token_program is not set"),
                  
          quote_token_program: self.instruction.quote_token_program.expect("quote_token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CollectFeesFromCpAmmCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fee_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fee_authority_base_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fee_authority_quote_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                amms_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                cp_amm: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                cp_amm_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                cp_amm_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                base_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                quote_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

