//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum LiquidityPoolError {
    /// 6000 - Invalid CpAmm vault address: expected associated token account does not match.
    #[error("Invalid CpAmm vault address: expected associated token account does not match.")]
    InvalidCpAmmVaultAddress = 0x1770,
    /// 6001 - CpAmm vault owner mismatch: the vault is not owned by the expected program.
    #[error("CpAmm vault owner mismatch: the vault is not owned by the expected program.")]
    InvalidCpAmmVaultOwner = 0x1771,
    /// 6002 - The provided fee rate for AmmsConfig exceeds the maximum allowed value of 10000 basis points (100%).
    #[error("The provided fee rate for AmmsConfig exceeds the maximum allowed value of 10000 basis points (100%).")]
    ConfigFeeRateExceeded = 0x1772,
    /// 6003 - Quote liquidity is zero.
    #[error("Quote liquidity is zero.")]
    QuoteLiquidityIsZero = 0x1773,
    /// 6004 - Base liquidity is zero.
    #[error("Base liquidity is zero.")]
    BaseLiquidityIsZero = 0x1774,
    /// 6005 - Quote liquidity is less then minimal operable liquidity.
    #[error("Quote liquidity is less then minimal operable liquidity.")]
    InsufficientQuoteLiquidity = 0x1775,
    /// 6006 - Base liquidity is less then minimal operable liquidity.
    #[error("Base liquidity is less then minimal operable liquidity.")]
    InsufficientBaseLiquidity = 0x1776,
    /// 6007 - Liquidity tokens supply is zero.
    #[error("Liquidity tokens supply is zero.")]
    LpTokensSupplyIsZero = 0x1777,
    /// 6008 - CpAmm is not launched.
    #[error("CpAmm is not launched.")]
    CpAmmNotLaunched = 0x1778,
    /// 6009 - CpAmm is not initialized.
    #[error("CpAmm is not initialized.")]
    CpAmmNotInitialized = 0x1779,
    /// 6010 - CpAmm is already initialized.
    #[error("CpAmm is already initialized.")]
    CpAmmAlreadyInitialized = 0x177A,
    /// 6011 - CpAmm is already launched.
    #[error("CpAmm is already launched.")]
    CpAmmAlreadyLaunched = 0x177B,
    /// 6012 - Provided quote liquidity is zero.
    #[error("Provided quote liquidity is zero.")]
    ProvidedQuoteLiquidityIsZero = 0x177C,
    /// 6013 - Provided base liquidity is zero.
    #[error("Provided base liquidity is zero.")]
    ProvidedBaseLiquidityIsZero = 0x177D,
    /// 6014 - Provided liquidity tokens are zero.
    #[error("Provided liquidity tokens are zero.")]
    ProvidedLpTokensIsZero = 0x177E,
    /// 6015 - Swap amount cannot be zero.
    #[error("Swap amount cannot be zero.")]
    SwapAmountIsZero = 0x177F,
    /// 6016 - Estimated swap result cannot be zero.
    #[error("Estimated swap result cannot be zero.")]
    EstimatedResultIsZero = 0x1780,
    /// 6017 - Launch liquidity must be at least 4 times greater than the initial locked liquidity.
    #[error("Launch liquidity must be at least 4 times greater than the initial locked liquidity.")]
    LaunchLiquidityTooSmall = 0x1781,
    /// 6018 - Failed to calculate liquidity tokens to mint due to invalid input or overflow.
    #[error("Failed to calculate liquidity tokens to mint due to invalid input or overflow.")]
    LpTokensCalculationFailed = 0x1782,
    /// 6019 - Failed to calculate afterswap state due to invalid input or overflow.
    #[error("Failed to calculate afterswap state due to invalid input or overflow.")]
    AfterswapCalculationFailed = 0x1783,
    /// 6020 - Failed to calculate withdraw liquidity due to invalid input or overflow.
    #[error("Failed to calculate withdraw liquidity due to invalid input or overflow.")]
    WithdrawLiquidityCalculationFailed = 0x1784,
    /// 6021 - Swap result is zero.
    #[error("Swap result is zero.")]
    SwapResultIsZero = 0x1785,
    /// 6022 - Swap fees are zero
    #[error("Swap fees are zero")]
    SwapFeesAreZero = 0x1786,
    /// 6023 - Calculated slippage exceeds allowed tolerance.
    #[error("Calculated slippage exceeds allowed tolerance.")]
    SwapSlippageExceeded = 0x1787,
    /// 6024 - Overflow error when providing liquidity.
    #[error("Overflow error when providing liquidity.")]
    ProvideOverflowError = 0x1788,
    /// 6025 - Overflow error when withdrawing liquidity.
    #[error("Overflow error when withdrawing liquidity.")]
    WithdrawOverflowError = 0x1789,
    /// 6026 - Overflow error when swapping.
    #[error("Overflow error when swapping.")]
    SwapOverflowError = 0x178A,
    /// 6027 - Protocol fees to redeem is zero
    #[error("Protocol fees to redeem is zero")]
    ProvidersFeesIsZero = 0x178B,
    /// 6028 - Failed to calculate base-to-quote liquidity ratio due to invalid input or overflow.
    #[error("Failed to calculate base-to-quote liquidity ratio due to invalid input or overflow.")]
    BaseQuoteRatioCalculationFailed = 0x178C,
    /// 6029 - Failed to calculate constant product due to invalid input or overflow.
    #[error("Failed to calculate constant product due to invalid input or overflow.")]
    ConstantProductCalculationFailed = 0x178D,
    /// 6030 - Constant product tolerance exceeded.
    #[error("Constant product tolerance exceeded.")]
    ConstantProductToleranceExceeded = 0x178E,
    /// 6031 - Liquidity ratio tolerance exceeded.
    #[error("Liquidity ratio tolerance exceeded.")]
    LiquidityRatioToleranceExceeded = 0x178F,
}

impl solana_program::program_error::PrintProgramError for LiquidityPoolError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for LiquidityPoolError {
    fn type_of() -> &'static str {
        "LiquidityPoolError"
    }
}

