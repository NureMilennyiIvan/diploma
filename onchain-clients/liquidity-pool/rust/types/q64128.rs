//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::U192;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Represents a fixed-point number with 64 integer bits and 128 fractional bits.
/// 
/// The `Q64_128` type is useful for high-precision arithmetic where fractional values
/// need to be represented without losing precision. Internally, it uses a 192-bit
/// unsigned integer (`U192`) to store the value, where the most significant 64 bits
/// represent the integer part, and the least significant 128 bits represent the fractional part.
/// 
/// This type provides utilities for fixed-point arithmetic, conversions from primitive types,
/// and accessing the integer and fractional components of the value.
#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Q64128 {
/// The internal representation of the fixed-point value as a 192-bit unsigned integer.
pub value: U192,
}


