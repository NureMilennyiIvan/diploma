//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::Q64128;
use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CpAmm {
pub discriminator: [u8; 8],
/// Whether the AMM has been initialized.
pub is_initialized: bool,
/// Whether the AMM has been launched and is active.
pub is_launched: bool,
/// Canonical bump seed for the account's PDA.
pub bump: [u8; 1],
/// Canonical bump seed for the base vault PDA.
pub base_vault_bump: [u8; 1],
/// Canonical bump seed for the quote vault PDA.
pub quote_vault_bump: [u8; 1],
/// Canonical bump seed for the locked LP vault PDA.
pub locked_lp_vault_bump: [u8; 1],
/// Initial liquidity that is permanently locked after the pool launch.
/// This stabilizes the pool in case of empty liquidity.
pub initial_locked_liquidity: u64,
/// Square root of the constant product of the pool, stored as a Q64.128 fixed-point number.
/// This ensures high accuracy during calculations.
pub constant_product_sqrt: Q64128,
/// Square root of the ratio between the base and quote tokens, stored as a Q64.128 fixed-point number.
pub base_quote_ratio_sqrt: Q64128,
/// Amount of base tokens currently in the pool's vault.
pub base_liquidity: u64,
/// Amount of quote tokens currently in the pool's vault.
pub quote_liquidity: u64,
/// Total supply of LP tokens minted to liquidity providers.
pub lp_tokens_supply: u64,
/// Accumulated base token fees that can be redeemed by the `AmmsConfig` account's authority.
pub protocol_base_fees_to_redeem: u64,
/// Accumulated quote token fees that can be redeemed by the `AmmsConfig` account's authority.
pub protocol_quote_fees_to_redeem: u64,
/// Public key of the base token's mint.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub base_mint: Pubkey,
/// Public key of the quote token's mint.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub quote_mint: Pubkey,
/// Public key of the LP token's mint.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub lp_mint: Pubkey,
/// Public key of the vault holding the base tokens.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub base_vault: Pubkey,
/// Public key of the vault holding the quote tokens.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub quote_vault: Pubkey,
/// Public key of the vault holding locked LP tokens.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub locked_lp_vault: Pubkey,
/// Public key of the associated `AmmsConfig` account.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub amms_config: Pubkey,
/// Public key of the CpAmm creator account.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub creator: Pubkey,
}


impl CpAmm {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for CpAmm {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "fetch")]
pub fn fetch_cp_amm(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<CpAmm>, std::io::Error> {
  let accounts = fetch_all_cp_amm(rpc, &[*address])?;
  Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_cp_amm(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<CpAmm>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<CpAmm>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      let account = accounts[i].as_ref()
        .ok_or(std::io::Error::new(std::io::ErrorKind::Other, format!("Account not found: {}", address)))?;
      let data = CpAmm::from_bytes(&account.data)?;
      decoded_accounts.push(crate::shared::DecodedAccount { address, account: account.clone(), data });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_cp_amm(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<CpAmm>, std::io::Error> {
    let accounts = fetch_all_maybe_cp_amm(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_cp_amm(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<CpAmm>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<CpAmm>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      if let Some(account) = accounts[i].as_ref() {
        let data = CpAmm::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::MaybeAccount::Exists(crate::shared::DecodedAccount { address, account: account.clone(), data }));
      } else {
        decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
      }
    }
  Ok(decoded_accounts)
}

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountDeserialize for CpAmm {
      fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
      }
  }

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountSerialize for CpAmm {}

  #[cfg(feature = "anchor")]
  impl anchor_lang::Owner for CpAmm {
      fn owner() -> Pubkey {
        crate::LIQUIDITY_POOL_ID
      }
  }

  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::IdlBuild for CpAmm {}

  
  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::Discriminator for CpAmm {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
  }

