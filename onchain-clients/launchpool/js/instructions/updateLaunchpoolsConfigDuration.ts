/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPOOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_LAUNCHPOOLS_CONFIG_DURATION_DISCRIMINATOR = new Uint8Array([
  220, 251, 136, 16, 65, 221, 15, 230,
]);

export function getUpdateLaunchpoolsConfigDurationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_LAUNCHPOOLS_CONFIG_DURATION_DISCRIMINATOR
  );
}

export type UpdateLaunchpoolsConfigDurationInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfigsManager extends
    | string
    | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfig extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountLaunchpoolsConfigsManager extends string
        ? ReadonlyAccount<TAccountLaunchpoolsConfigsManager>
        : TAccountLaunchpoolsConfigsManager,
      TAccountLaunchpoolsConfig extends string
        ? WritableAccount<TAccountLaunchpoolsConfig>
        : TAccountLaunchpoolsConfig,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateLaunchpoolsConfigDurationInstructionData = {
  discriminator: ReadonlyUint8Array;
  newDuration: bigint;
};

export type UpdateLaunchpoolsConfigDurationInstructionDataArgs = {
  newDuration: number | bigint;
};

export function getUpdateLaunchpoolsConfigDurationInstructionDataEncoder(): Encoder<UpdateLaunchpoolsConfigDurationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newDuration', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_LAUNCHPOOLS_CONFIG_DURATION_DISCRIMINATOR,
    })
  );
}

export function getUpdateLaunchpoolsConfigDurationInstructionDataDecoder(): Decoder<UpdateLaunchpoolsConfigDurationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newDuration', getU64Decoder()],
  ]);
}

export function getUpdateLaunchpoolsConfigDurationInstructionDataCodec(): Codec<
  UpdateLaunchpoolsConfigDurationInstructionDataArgs,
  UpdateLaunchpoolsConfigDurationInstructionData
> {
  return combineCodec(
    getUpdateLaunchpoolsConfigDurationInstructionDataEncoder(),
    getUpdateLaunchpoolsConfigDurationInstructionDataDecoder()
  );
}

export type UpdateLaunchpoolsConfigDurationAsyncInput<
  TAccountAuthority extends string = string,
  TAccountLaunchpoolsConfigsManager extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  launchpoolsConfigsManager?: Address<TAccountLaunchpoolsConfigsManager>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  newDuration: UpdateLaunchpoolsConfigDurationInstructionDataArgs['newDuration'];
};

export async function getUpdateLaunchpoolsConfigDurationInstructionAsync<
  TAccountAuthority extends string,
  TAccountLaunchpoolsConfigsManager extends string,
  TAccountLaunchpoolsConfig extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: UpdateLaunchpoolsConfigDurationAsyncInput<
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateLaunchpoolsConfigDurationInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    launchpoolsConfigsManager: {
      value: input.launchpoolsConfigsManager ?? null,
      isWritable: false,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.launchpoolsConfigsManager.value) {
    accounts.launchpoolsConfigsManager.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 112, 111, 111, 108, 115, 95, 99, 111,
            110, 102, 105, 103, 115, 95, 109, 97, 110, 97, 103, 101, 114,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.launchpoolsConfigsManager),
      getAccountMeta(accounts.launchpoolsConfig),
    ],
    programAddress,
    data: getUpdateLaunchpoolsConfigDurationInstructionDataEncoder().encode(
      args as UpdateLaunchpoolsConfigDurationInstructionDataArgs
    ),
  } as UpdateLaunchpoolsConfigDurationInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig
  >;

  return instruction;
}

export type UpdateLaunchpoolsConfigDurationInput<
  TAccountAuthority extends string = string,
  TAccountLaunchpoolsConfigsManager extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  launchpoolsConfigsManager: Address<TAccountLaunchpoolsConfigsManager>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  newDuration: UpdateLaunchpoolsConfigDurationInstructionDataArgs['newDuration'];
};

export function getUpdateLaunchpoolsConfigDurationInstruction<
  TAccountAuthority extends string,
  TAccountLaunchpoolsConfigsManager extends string,
  TAccountLaunchpoolsConfig extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: UpdateLaunchpoolsConfigDurationInput<
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateLaunchpoolsConfigDurationInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountLaunchpoolsConfigsManager,
  TAccountLaunchpoolsConfig
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    launchpoolsConfigsManager: {
      value: input.launchpoolsConfigsManager ?? null,
      isWritable: false,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.launchpoolsConfigsManager),
      getAccountMeta(accounts.launchpoolsConfig),
    ],
    programAddress,
    data: getUpdateLaunchpoolsConfigDurationInstructionDataEncoder().encode(
      args as UpdateLaunchpoolsConfigDurationInstructionDataArgs
    ),
  } as UpdateLaunchpoolsConfigDurationInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig
  >;

  return instruction;
}

export type ParsedUpdateLaunchpoolsConfigDurationInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    launchpoolsConfigsManager: TAccountMetas[1];
    launchpoolsConfig: TAccountMetas[2];
  };
  data: UpdateLaunchpoolsConfigDurationInstructionData;
};

export function parseUpdateLaunchpoolsConfigDurationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateLaunchpoolsConfigDurationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      launchpoolsConfigsManager: getNextAccount(),
      launchpoolsConfig: getNextAccount(),
    },
    data: getUpdateLaunchpoolsConfigDurationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
