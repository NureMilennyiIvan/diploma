/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPOOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_LAUNCHPOOL_DISCRIMINATOR = new Uint8Array([
  156, 238, 139, 169, 11, 60, 242, 202,
]);

export function getInitializeLaunchpoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_LAUNCHPOOL_DISCRIMINATOR
  );
}

export type InitializeLaunchpoolInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfigsManager extends
    | string
    | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfig extends string | IAccountMeta<string> = string,
  TAccountRewardMint extends string | IAccountMeta<string> = string,
  TAccountLaunchpool extends string | IAccountMeta<string> = string,
  TAccountRewardVault extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRewardTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountLaunchpoolsConfigsManager extends string
        ? ReadonlyAccount<TAccountLaunchpoolsConfigsManager>
        : TAccountLaunchpoolsConfigsManager,
      TAccountLaunchpoolsConfig extends string
        ? ReadonlyAccount<TAccountLaunchpoolsConfig>
        : TAccountLaunchpoolsConfig,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountLaunchpool extends string
        ? WritableAccount<TAccountLaunchpool>
        : TAccountLaunchpool,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeLaunchpoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  initialRewardAmount: bigint;
};

export type InitializeLaunchpoolInstructionDataArgs = {
  initialRewardAmount: number | bigint;
};

export function getInitializeLaunchpoolInstructionDataEncoder(): Encoder<InitializeLaunchpoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['initialRewardAmount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_LAUNCHPOOL_DISCRIMINATOR,
    })
  );
}

export function getInitializeLaunchpoolInstructionDataDecoder(): Decoder<InitializeLaunchpoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['initialRewardAmount', getU64Decoder()],
  ]);
}

export function getInitializeLaunchpoolInstructionDataCodec(): Codec<
  InitializeLaunchpoolInstructionDataArgs,
  InitializeLaunchpoolInstructionData
> {
  return combineCodec(
    getInitializeLaunchpoolInstructionDataEncoder(),
    getInitializeLaunchpoolInstructionDataDecoder()
  );
}

export type InitializeLaunchpoolAsyncInput<
  TAccountAuthority extends string = string,
  TAccountLaunchpoolsConfigsManager extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountRewardMint extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  launchpoolsConfigsManager?: Address<TAccountLaunchpoolsConfigsManager>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  rewardMint: Address<TAccountRewardMint>;
  launchpool?: Address<TAccountLaunchpool>;
  rewardVault?: Address<TAccountRewardVault>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  initialRewardAmount: InitializeLaunchpoolInstructionDataArgs['initialRewardAmount'];
};

export async function getInitializeLaunchpoolInstructionAsync<
  TAccountAuthority extends string,
  TAccountLaunchpoolsConfigsManager extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountRewardMint extends string,
  TAccountLaunchpool extends string,
  TAccountRewardVault extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountRewardTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeLaunchpoolAsyncInput<
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeLaunchpoolInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    launchpoolsConfigsManager: {
      value: input.launchpoolsConfigsManager ?? null,
      isWritable: false,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.launchpoolsConfigsManager.value) {
    accounts.launchpoolsConfigsManager.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 112, 111, 111, 108, 115, 95, 99, 111,
            110, 102, 105, 103, 115, 95, 109, 97, 110, 97, 103, 101, 114,
          ])
        ),
      ],
    });
  }
  if (!accounts.launchpool.value) {
    accounts.launchpool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([108, 97, 117, 110, 99, 104, 112, 111, 111, 108])
        ),
        getAddressEncoder().encode(expectAddress(accounts.rewardMint.value)),
      ],
    });
  }
  if (!accounts.rewardVault.value) {
    accounts.rewardVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.launchpool.value)),
      ],
    });
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.launchpoolsConfigsManager),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rewardTokenProgram),
    ],
    programAddress,
    data: getInitializeLaunchpoolInstructionDataEncoder().encode(
      args as InitializeLaunchpoolInstructionDataArgs
    ),
  } as InitializeLaunchpoolInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >;

  return instruction;
}

export type InitializeLaunchpoolInput<
  TAccountAuthority extends string = string,
  TAccountLaunchpoolsConfigsManager extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountRewardMint extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  launchpoolsConfigsManager: Address<TAccountLaunchpoolsConfigsManager>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  rewardMint: Address<TAccountRewardMint>;
  launchpool: Address<TAccountLaunchpool>;
  rewardVault: Address<TAccountRewardVault>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  initialRewardAmount: InitializeLaunchpoolInstructionDataArgs['initialRewardAmount'];
};

export function getInitializeLaunchpoolInstruction<
  TAccountAuthority extends string,
  TAccountLaunchpoolsConfigsManager extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountRewardMint extends string,
  TAccountLaunchpool extends string,
  TAccountRewardVault extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountRewardTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeLaunchpoolInput<
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeLaunchpoolInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountLaunchpoolsConfigsManager,
  TAccountLaunchpoolsConfig,
  TAccountRewardMint,
  TAccountLaunchpool,
  TAccountRewardVault,
  TAccountRent,
  TAccountSystemProgram,
  TAccountRewardTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    launchpoolsConfigsManager: {
      value: input.launchpoolsConfigsManager ?? null,
      isWritable: false,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.launchpoolsConfigsManager),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rewardTokenProgram),
    ],
    programAddress,
    data: getInitializeLaunchpoolInstructionDataEncoder().encode(
      args as InitializeLaunchpoolInstructionDataArgs
    ),
  } as InitializeLaunchpoolInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountLaunchpoolsConfigsManager,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeLaunchpoolInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    launchpoolsConfigsManager: TAccountMetas[1];
    launchpoolsConfig: TAccountMetas[2];
    rewardMint: TAccountMetas[3];
    launchpool: TAccountMetas[4];
    rewardVault: TAccountMetas[5];
    rent: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    rewardTokenProgram: TAccountMetas[8];
  };
  data: InitializeLaunchpoolInstructionData;
};

export function parseInitializeLaunchpoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeLaunchpoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      launchpoolsConfigsManager: getNextAccount(),
      launchpoolsConfig: getNextAccount(),
      rewardMint: getNextAccount(),
      launchpool: getNextAccount(),
      rewardVault: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
    },
    data: getInitializeLaunchpoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
