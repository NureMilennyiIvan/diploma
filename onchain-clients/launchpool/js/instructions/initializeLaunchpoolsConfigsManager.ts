/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPOOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_LAUNCHPOOLS_CONFIGS_MANAGER_DISCRIMINATOR =
  new Uint8Array([215, 201, 70, 202, 198, 131, 180, 137]);

export function getInitializeLaunchpoolsConfigsManagerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_LAUNCHPOOLS_CONFIGS_MANAGER_DISCRIMINATOR
  );
}

export type InitializeLaunchpoolsConfigsManagerInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfigsManager extends
    | string
    | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountHeadAuthority extends string | IAccountMeta<string> = string,
  TAccountProgramData extends string | IAccountMeta<string> = string,
  TAccountLaunchpoolProgram extends
    | string
    | IAccountMeta<string> = '5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountLaunchpoolsConfigsManager extends string
        ? WritableAccount<TAccountLaunchpoolsConfigsManager>
        : TAccountLaunchpoolsConfigsManager,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountHeadAuthority extends string
        ? ReadonlyAccount<TAccountHeadAuthority>
        : TAccountHeadAuthority,
      TAccountProgramData extends string
        ? ReadonlyAccount<TAccountProgramData>
        : TAccountProgramData,
      TAccountLaunchpoolProgram extends string
        ? ReadonlyAccount<TAccountLaunchpoolProgram>
        : TAccountLaunchpoolProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeLaunchpoolsConfigsManagerInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeLaunchpoolsConfigsManagerInstructionDataArgs = {};

export function getInitializeLaunchpoolsConfigsManagerInstructionDataEncoder(): Encoder<InitializeLaunchpoolsConfigsManagerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_LAUNCHPOOLS_CONFIGS_MANAGER_DISCRIMINATOR,
    })
  );
}

export function getInitializeLaunchpoolsConfigsManagerInstructionDataDecoder(): Decoder<InitializeLaunchpoolsConfigsManagerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeLaunchpoolsConfigsManagerInstructionDataCodec(): Codec<
  InitializeLaunchpoolsConfigsManagerInstructionDataArgs,
  InitializeLaunchpoolsConfigsManagerInstructionData
> {
  return combineCodec(
    getInitializeLaunchpoolsConfigsManagerInstructionDataEncoder(),
    getInitializeLaunchpoolsConfigsManagerInstructionDataDecoder()
  );
}

export type InitializeLaunchpoolsConfigsManagerAsyncInput<
  TAccountSigner extends string = string,
  TAccountLaunchpoolsConfigsManager extends string = string,
  TAccountAuthority extends string = string,
  TAccountHeadAuthority extends string = string,
  TAccountProgramData extends string = string,
  TAccountLaunchpoolProgram extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  launchpoolsConfigsManager?: Address<TAccountLaunchpoolsConfigsManager>;
  authority: Address<TAccountAuthority>;
  headAuthority: Address<TAccountHeadAuthority>;
  programData: Address<TAccountProgramData>;
  launchpoolProgram?: Address<TAccountLaunchpoolProgram>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeLaunchpoolsConfigsManagerInstructionAsync<
  TAccountSigner extends string,
  TAccountLaunchpoolsConfigsManager extends string,
  TAccountAuthority extends string,
  TAccountHeadAuthority extends string,
  TAccountProgramData extends string,
  TAccountLaunchpoolProgram extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeLaunchpoolsConfigsManagerAsyncInput<
    TAccountSigner,
    TAccountLaunchpoolsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountProgramData,
    TAccountLaunchpoolProgram,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeLaunchpoolsConfigsManagerInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountLaunchpoolsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountProgramData,
    TAccountLaunchpoolProgram,
    TAccountRent,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    launchpoolsConfigsManager: {
      value: input.launchpoolsConfigsManager ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    headAuthority: { value: input.headAuthority ?? null, isWritable: false },
    programData: { value: input.programData ?? null, isWritable: false },
    launchpoolProgram: {
      value: input.launchpoolProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.launchpoolsConfigsManager.value) {
    accounts.launchpoolsConfigsManager.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            108, 97, 117, 110, 99, 104, 112, 111, 111, 108, 115, 95, 99, 111,
            110, 102, 105, 103, 115, 95, 109, 97, 110, 97, 103, 101, 114,
          ])
        ),
      ],
    });
  }
  if (!accounts.launchpoolProgram.value) {
    accounts.launchpoolProgram.value =
      '5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU' as Address<'5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.launchpoolsConfigsManager),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.headAuthority),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.launchpoolProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeLaunchpoolsConfigsManagerInstructionDataEncoder().encode(
      {}
    ),
  } as InitializeLaunchpoolsConfigsManagerInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountLaunchpoolsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountProgramData,
    TAccountLaunchpoolProgram,
    TAccountRent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeLaunchpoolsConfigsManagerInput<
  TAccountSigner extends string = string,
  TAccountLaunchpoolsConfigsManager extends string = string,
  TAccountAuthority extends string = string,
  TAccountHeadAuthority extends string = string,
  TAccountProgramData extends string = string,
  TAccountLaunchpoolProgram extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  launchpoolsConfigsManager: Address<TAccountLaunchpoolsConfigsManager>;
  authority: Address<TAccountAuthority>;
  headAuthority: Address<TAccountHeadAuthority>;
  programData: Address<TAccountProgramData>;
  launchpoolProgram?: Address<TAccountLaunchpoolProgram>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeLaunchpoolsConfigsManagerInstruction<
  TAccountSigner extends string,
  TAccountLaunchpoolsConfigsManager extends string,
  TAccountAuthority extends string,
  TAccountHeadAuthority extends string,
  TAccountProgramData extends string,
  TAccountLaunchpoolProgram extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeLaunchpoolsConfigsManagerInput<
    TAccountSigner,
    TAccountLaunchpoolsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountProgramData,
    TAccountLaunchpoolProgram,
    TAccountRent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeLaunchpoolsConfigsManagerInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountLaunchpoolsConfigsManager,
  TAccountAuthority,
  TAccountHeadAuthority,
  TAccountProgramData,
  TAccountLaunchpoolProgram,
  TAccountRent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    launchpoolsConfigsManager: {
      value: input.launchpoolsConfigsManager ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    headAuthority: { value: input.headAuthority ?? null, isWritable: false },
    programData: { value: input.programData ?? null, isWritable: false },
    launchpoolProgram: {
      value: input.launchpoolProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.launchpoolProgram.value) {
    accounts.launchpoolProgram.value =
      '5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU' as Address<'5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.launchpoolsConfigsManager),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.headAuthority),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.launchpoolProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeLaunchpoolsConfigsManagerInstructionDataEncoder().encode(
      {}
    ),
  } as InitializeLaunchpoolsConfigsManagerInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountLaunchpoolsConfigsManager,
    TAccountAuthority,
    TAccountHeadAuthority,
    TAccountProgramData,
    TAccountLaunchpoolProgram,
    TAccountRent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeLaunchpoolsConfigsManagerInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    launchpoolsConfigsManager: TAccountMetas[1];
    authority: TAccountMetas[2];
    headAuthority: TAccountMetas[3];
    programData: TAccountMetas[4];
    launchpoolProgram: TAccountMetas[5];
    rent: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: InitializeLaunchpoolsConfigsManagerInstructionData;
};

export function parseInitializeLaunchpoolsConfigsManagerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeLaunchpoolsConfigsManagerInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      launchpoolsConfigsManager: getNextAccount(),
      authority: getNextAccount(),
      headAuthority: getNextAccount(),
      programData: getNextAccount(),
      launchpoolProgram: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeLaunchpoolsConfigsManagerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
