/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPOOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INCREASE_STAKE_POSITION_DISCRIMINATOR = new Uint8Array([
  180, 156, 141, 191, 172, 190, 10, 26,
]);

export function getIncreaseStakePositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCREASE_STAKE_POSITION_DISCRIMINATOR
  );
}

export type IncreaseStakePositionInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountSignerStakableAccount extends string | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfig extends string | IAccountMeta<string> = string,
  TAccountStakableMint extends string | IAccountMeta<string> = string,
  TAccountLaunchpool extends string | IAccountMeta<string> = string,
  TAccountStakePosition extends string | IAccountMeta<string> = string,
  TAccountStakeVault extends string | IAccountMeta<string> = string,
  TAccountStakableTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSignerStakableAccount extends string
        ? WritableAccount<TAccountSignerStakableAccount>
        : TAccountSignerStakableAccount,
      TAccountLaunchpoolsConfig extends string
        ? ReadonlyAccount<TAccountLaunchpoolsConfig>
        : TAccountLaunchpoolsConfig,
      TAccountStakableMint extends string
        ? ReadonlyAccount<TAccountStakableMint>
        : TAccountStakableMint,
      TAccountLaunchpool extends string
        ? WritableAccount<TAccountLaunchpool>
        : TAccountLaunchpool,
      TAccountStakePosition extends string
        ? WritableAccount<TAccountStakePosition>
        : TAccountStakePosition,
      TAccountStakeVault extends string
        ? WritableAccount<TAccountStakeVault>
        : TAccountStakeVault,
      TAccountStakableTokenProgram extends string
        ? ReadonlyAccount<TAccountStakableTokenProgram>
        : TAccountStakableTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IncreaseStakePositionInstructionData = {
  discriminator: ReadonlyUint8Array;
  stakeIncreaseAmount: bigint;
};

export type IncreaseStakePositionInstructionDataArgs = {
  stakeIncreaseAmount: number | bigint;
};

export function getIncreaseStakePositionInstructionDataEncoder(): Encoder<IncreaseStakePositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakeIncreaseAmount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INCREASE_STAKE_POSITION_DISCRIMINATOR,
    })
  );
}

export function getIncreaseStakePositionInstructionDataDecoder(): Decoder<IncreaseStakePositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakeIncreaseAmount', getU64Decoder()],
  ]);
}

export function getIncreaseStakePositionInstructionDataCodec(): Codec<
  IncreaseStakePositionInstructionDataArgs,
  IncreaseStakePositionInstructionData
> {
  return combineCodec(
    getIncreaseStakePositionInstructionDataEncoder(),
    getIncreaseStakePositionInstructionDataDecoder()
  );
}

export type IncreaseStakePositionAsyncInput<
  TAccountSigner extends string = string,
  TAccountSignerStakableAccount extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountStakableMint extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountStakePosition extends string = string,
  TAccountStakeVault extends string = string,
  TAccountStakableTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  signerStakableAccount: Address<TAccountSignerStakableAccount>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  stakableMint: Address<TAccountStakableMint>;
  launchpool: Address<TAccountLaunchpool>;
  stakePosition: Address<TAccountStakePosition>;
  stakeVault?: Address<TAccountStakeVault>;
  stakableTokenProgram: Address<TAccountStakableTokenProgram>;
  stakeIncreaseAmount: IncreaseStakePositionInstructionDataArgs['stakeIncreaseAmount'];
};

export async function getIncreaseStakePositionInstructionAsync<
  TAccountSigner extends string,
  TAccountSignerStakableAccount extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountStakableMint extends string,
  TAccountLaunchpool extends string,
  TAccountStakePosition extends string,
  TAccountStakeVault extends string,
  TAccountStakableTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: IncreaseStakePositionAsyncInput<
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountStakableTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  IncreaseStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountStakableTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    signerStakableAccount: {
      value: input.signerStakableAccount ?? null,
      isWritable: true,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    stakableMint: { value: input.stakableMint ?? null, isWritable: false },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    stakePosition: { value: input.stakePosition ?? null, isWritable: true },
    stakeVault: { value: input.stakeVault ?? null, isWritable: true },
    stakableTokenProgram: {
      value: input.stakableTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.stakeVault.value) {
    accounts.stakeVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.stakePosition.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.signerStakableAccount),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.stakableMint),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.stakePosition),
      getAccountMeta(accounts.stakeVault),
      getAccountMeta(accounts.stakableTokenProgram),
    ],
    programAddress,
    data: getIncreaseStakePositionInstructionDataEncoder().encode(
      args as IncreaseStakePositionInstructionDataArgs
    ),
  } as IncreaseStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountStakableTokenProgram
  >;

  return instruction;
}

export type IncreaseStakePositionInput<
  TAccountSigner extends string = string,
  TAccountSignerStakableAccount extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountStakableMint extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountStakePosition extends string = string,
  TAccountStakeVault extends string = string,
  TAccountStakableTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  signerStakableAccount: Address<TAccountSignerStakableAccount>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  stakableMint: Address<TAccountStakableMint>;
  launchpool: Address<TAccountLaunchpool>;
  stakePosition: Address<TAccountStakePosition>;
  stakeVault: Address<TAccountStakeVault>;
  stakableTokenProgram: Address<TAccountStakableTokenProgram>;
  stakeIncreaseAmount: IncreaseStakePositionInstructionDataArgs['stakeIncreaseAmount'];
};

export function getIncreaseStakePositionInstruction<
  TAccountSigner extends string,
  TAccountSignerStakableAccount extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountStakableMint extends string,
  TAccountLaunchpool extends string,
  TAccountStakePosition extends string,
  TAccountStakeVault extends string,
  TAccountStakableTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: IncreaseStakePositionInput<
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountStakableTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): IncreaseStakePositionInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountSignerStakableAccount,
  TAccountLaunchpoolsConfig,
  TAccountStakableMint,
  TAccountLaunchpool,
  TAccountStakePosition,
  TAccountStakeVault,
  TAccountStakableTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    signerStakableAccount: {
      value: input.signerStakableAccount ?? null,
      isWritable: true,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    stakableMint: { value: input.stakableMint ?? null, isWritable: false },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    stakePosition: { value: input.stakePosition ?? null, isWritable: true },
    stakeVault: { value: input.stakeVault ?? null, isWritable: true },
    stakableTokenProgram: {
      value: input.stakableTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.signerStakableAccount),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.stakableMint),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.stakePosition),
      getAccountMeta(accounts.stakeVault),
      getAccountMeta(accounts.stakableTokenProgram),
    ],
    programAddress,
    data: getIncreaseStakePositionInstructionDataEncoder().encode(
      args as IncreaseStakePositionInstructionDataArgs
    ),
  } as IncreaseStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountStakableTokenProgram
  >;

  return instruction;
}

export type ParsedIncreaseStakePositionInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    signerStakableAccount: TAccountMetas[1];
    launchpoolsConfig: TAccountMetas[2];
    stakableMint: TAccountMetas[3];
    launchpool: TAccountMetas[4];
    stakePosition: TAccountMetas[5];
    stakeVault: TAccountMetas[6];
    stakableTokenProgram: TAccountMetas[7];
  };
  data: IncreaseStakePositionInstructionData;
};

export function parseIncreaseStakePositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedIncreaseStakePositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      signerStakableAccount: getNextAccount(),
      launchpoolsConfig: getNextAccount(),
      stakableMint: getNextAccount(),
      launchpool: getNextAccount(),
      stakePosition: getNextAccount(),
      stakeVault: getNextAccount(),
      stakableTokenProgram: getNextAccount(),
    },
    data: getIncreaseStakePositionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
