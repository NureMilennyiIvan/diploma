/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPOOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const OPEN_STAKE_POSITION_DISCRIMINATOR = new Uint8Array([
  100, 46, 32, 248, 0, 29, 122, 21,
]);

export function getOpenStakePositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPEN_STAKE_POSITION_DISCRIMINATOR
  );
}

export type OpenStakePositionInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountSignerStakableAccount extends string | IAccountMeta<string> = string,
  TAccountStakableMint extends string | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfig extends string | IAccountMeta<string> = string,
  TAccountLaunchpool extends string | IAccountMeta<string> = string,
  TAccountStakePosition extends string | IAccountMeta<string> = string,
  TAccountStakeVault extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakableTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSignerStakableAccount extends string
        ? WritableAccount<TAccountSignerStakableAccount>
        : TAccountSignerStakableAccount,
      TAccountStakableMint extends string
        ? ReadonlyAccount<TAccountStakableMint>
        : TAccountStakableMint,
      TAccountLaunchpoolsConfig extends string
        ? ReadonlyAccount<TAccountLaunchpoolsConfig>
        : TAccountLaunchpoolsConfig,
      TAccountLaunchpool extends string
        ? WritableAccount<TAccountLaunchpool>
        : TAccountLaunchpool,
      TAccountStakePosition extends string
        ? WritableAccount<TAccountStakePosition>
        : TAccountStakePosition,
      TAccountStakeVault extends string
        ? WritableAccount<TAccountStakeVault>
        : TAccountStakeVault,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakableTokenProgram extends string
        ? ReadonlyAccount<TAccountStakableTokenProgram>
        : TAccountStakableTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type OpenStakePositionInstructionData = {
  discriminator: ReadonlyUint8Array;
  stakeAmount: bigint;
};

export type OpenStakePositionInstructionDataArgs = {
  stakeAmount: number | bigint;
};

export function getOpenStakePositionInstructionDataEncoder(): Encoder<OpenStakePositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakeAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: OPEN_STAKE_POSITION_DISCRIMINATOR })
  );
}

export function getOpenStakePositionInstructionDataDecoder(): Decoder<OpenStakePositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakeAmount', getU64Decoder()],
  ]);
}

export function getOpenStakePositionInstructionDataCodec(): Codec<
  OpenStakePositionInstructionDataArgs,
  OpenStakePositionInstructionData
> {
  return combineCodec(
    getOpenStakePositionInstructionDataEncoder(),
    getOpenStakePositionInstructionDataDecoder()
  );
}

export type OpenStakePositionAsyncInput<
  TAccountSigner extends string = string,
  TAccountSignerStakableAccount extends string = string,
  TAccountStakableMint extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountStakePosition extends string = string,
  TAccountStakeVault extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakableTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  signerStakableAccount: Address<TAccountSignerStakableAccount>;
  stakableMint: Address<TAccountStakableMint>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  launchpool: Address<TAccountLaunchpool>;
  stakePosition?: Address<TAccountStakePosition>;
  stakeVault?: Address<TAccountStakeVault>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakableTokenProgram: Address<TAccountStakableTokenProgram>;
  stakeAmount: OpenStakePositionInstructionDataArgs['stakeAmount'];
};

export async function getOpenStakePositionInstructionAsync<
  TAccountSigner extends string,
  TAccountSignerStakableAccount extends string,
  TAccountStakableMint extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountLaunchpool extends string,
  TAccountStakePosition extends string,
  TAccountStakeVault extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountStakableTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: OpenStakePositionAsyncInput<
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountStakableMint,
    TAccountLaunchpoolsConfig,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  OpenStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountStakableMint,
    TAccountLaunchpoolsConfig,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    signerStakableAccount: {
      value: input.signerStakableAccount ?? null,
      isWritable: true,
    },
    stakableMint: { value: input.stakableMint ?? null, isWritable: false },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    stakePosition: { value: input.stakePosition ?? null, isWritable: true },
    stakeVault: { value: input.stakeVault ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakableTokenProgram: {
      value: input.stakableTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.stakePosition.value) {
    accounts.stakePosition.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 116, 97, 107, 101, 95, 112, 111, 115, 105, 116, 105, 111, 110,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getAddressEncoder().encode(expectAddress(accounts.launchpool.value)),
      ],
    });
  }
  if (!accounts.stakeVault.value) {
    accounts.stakeVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.stakePosition.value)),
      ],
    });
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.signerStakableAccount),
      getAccountMeta(accounts.stakableMint),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.stakePosition),
      getAccountMeta(accounts.stakeVault),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakableTokenProgram),
    ],
    programAddress,
    data: getOpenStakePositionInstructionDataEncoder().encode(
      args as OpenStakePositionInstructionDataArgs
    ),
  } as OpenStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountStakableMint,
    TAccountLaunchpoolsConfig,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram
  >;

  return instruction;
}

export type OpenStakePositionInput<
  TAccountSigner extends string = string,
  TAccountSignerStakableAccount extends string = string,
  TAccountStakableMint extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountStakePosition extends string = string,
  TAccountStakeVault extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakableTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  signerStakableAccount: Address<TAccountSignerStakableAccount>;
  stakableMint: Address<TAccountStakableMint>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  launchpool: Address<TAccountLaunchpool>;
  stakePosition: Address<TAccountStakePosition>;
  stakeVault: Address<TAccountStakeVault>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakableTokenProgram: Address<TAccountStakableTokenProgram>;
  stakeAmount: OpenStakePositionInstructionDataArgs['stakeAmount'];
};

export function getOpenStakePositionInstruction<
  TAccountSigner extends string,
  TAccountSignerStakableAccount extends string,
  TAccountStakableMint extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountLaunchpool extends string,
  TAccountStakePosition extends string,
  TAccountStakeVault extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountStakableTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: OpenStakePositionInput<
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountStakableMint,
    TAccountLaunchpoolsConfig,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): OpenStakePositionInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountSignerStakableAccount,
  TAccountStakableMint,
  TAccountLaunchpoolsConfig,
  TAccountLaunchpool,
  TAccountStakePosition,
  TAccountStakeVault,
  TAccountRent,
  TAccountSystemProgram,
  TAccountStakableTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    signerStakableAccount: {
      value: input.signerStakableAccount ?? null,
      isWritable: true,
    },
    stakableMint: { value: input.stakableMint ?? null, isWritable: false },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    stakePosition: { value: input.stakePosition ?? null, isWritable: true },
    stakeVault: { value: input.stakeVault ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakableTokenProgram: {
      value: input.stakableTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.signerStakableAccount),
      getAccountMeta(accounts.stakableMint),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.stakePosition),
      getAccountMeta(accounts.stakeVault),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakableTokenProgram),
    ],
    programAddress,
    data: getOpenStakePositionInstructionDataEncoder().encode(
      args as OpenStakePositionInstructionDataArgs
    ),
  } as OpenStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerStakableAccount,
    TAccountStakableMint,
    TAccountLaunchpoolsConfig,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram
  >;

  return instruction;
}

export type ParsedOpenStakePositionInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    signerStakableAccount: TAccountMetas[1];
    stakableMint: TAccountMetas[2];
    launchpoolsConfig: TAccountMetas[3];
    launchpool: TAccountMetas[4];
    stakePosition: TAccountMetas[5];
    stakeVault: TAccountMetas[6];
    rent: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    stakableTokenProgram: TAccountMetas[9];
  };
  data: OpenStakePositionInstructionData;
};

export function parseOpenStakePositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedOpenStakePositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      signerStakableAccount: getNextAccount(),
      stakableMint: getNextAccount(),
      launchpoolsConfig: getNextAccount(),
      launchpool: getNextAccount(),
      stakePosition: getNextAccount(),
      stakeVault: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
      stakableTokenProgram: getNextAccount(),
    },
    data: getOpenStakePositionInstructionDataDecoder().decode(instruction.data),
  };
}
