/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPOOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLOSE_STAKE_POSITION_DISCRIMINATOR = new Uint8Array([
  8, 63, 74, 143, 105, 42, 28, 64,
]);

export function getCloseStakePositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_STAKE_POSITION_DISCRIMINATOR
  );
}

export type CloseStakePositionInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountSignerRewardAccount extends string | IAccountMeta<string> = string,
  TAccountSignerStakableAccount extends string | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfig extends string | IAccountMeta<string> = string,
  TAccountStakableMint extends string | IAccountMeta<string> = string,
  TAccountRewardMint extends string | IAccountMeta<string> = string,
  TAccountLaunchpool extends string | IAccountMeta<string> = string,
  TAccountStakePosition extends string | IAccountMeta<string> = string,
  TAccountStakeVault extends string | IAccountMeta<string> = string,
  TAccountRewardVault extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakableTokenProgram extends string | IAccountMeta<string> = string,
  TAccountRewardTokenProgram extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSignerRewardAccount extends string
        ? WritableAccount<TAccountSignerRewardAccount>
        : TAccountSignerRewardAccount,
      TAccountSignerStakableAccount extends string
        ? WritableAccount<TAccountSignerStakableAccount>
        : TAccountSignerStakableAccount,
      TAccountLaunchpoolsConfig extends string
        ? ReadonlyAccount<TAccountLaunchpoolsConfig>
        : TAccountLaunchpoolsConfig,
      TAccountStakableMint extends string
        ? ReadonlyAccount<TAccountStakableMint>
        : TAccountStakableMint,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountLaunchpool extends string
        ? WritableAccount<TAccountLaunchpool>
        : TAccountLaunchpool,
      TAccountStakePosition extends string
        ? WritableAccount<TAccountStakePosition>
        : TAccountStakePosition,
      TAccountStakeVault extends string
        ? WritableAccount<TAccountStakeVault>
        : TAccountStakeVault,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakableTokenProgram extends string
        ? ReadonlyAccount<TAccountStakableTokenProgram>
        : TAccountStakableTokenProgram,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseStakePositionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseStakePositionInstructionDataArgs = {};

export function getCloseStakePositionInstructionDataEncoder(): Encoder<CloseStakePositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_STAKE_POSITION_DISCRIMINATOR })
  );
}

export function getCloseStakePositionInstructionDataDecoder(): Decoder<CloseStakePositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseStakePositionInstructionDataCodec(): Codec<
  CloseStakePositionInstructionDataArgs,
  CloseStakePositionInstructionData
> {
  return combineCodec(
    getCloseStakePositionInstructionDataEncoder(),
    getCloseStakePositionInstructionDataDecoder()
  );
}

export type CloseStakePositionAsyncInput<
  TAccountSigner extends string = string,
  TAccountSignerRewardAccount extends string = string,
  TAccountSignerStakableAccount extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountStakableMint extends string = string,
  TAccountRewardMint extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountStakePosition extends string = string,
  TAccountStakeVault extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakableTokenProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  signerRewardAccount: Address<TAccountSignerRewardAccount>;
  signerStakableAccount: Address<TAccountSignerStakableAccount>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  stakableMint: Address<TAccountStakableMint>;
  rewardMint: Address<TAccountRewardMint>;
  launchpool: Address<TAccountLaunchpool>;
  stakePosition: Address<TAccountStakePosition>;
  stakeVault?: Address<TAccountStakeVault>;
  rewardVault?: Address<TAccountRewardVault>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakableTokenProgram: Address<TAccountStakableTokenProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export async function getCloseStakePositionInstructionAsync<
  TAccountSigner extends string,
  TAccountSignerRewardAccount extends string,
  TAccountSignerStakableAccount extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountStakableMint extends string,
  TAccountRewardMint extends string,
  TAccountLaunchpool extends string,
  TAccountStakePosition extends string,
  TAccountStakeVault extends string,
  TAccountRewardVault extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountStakableTokenProgram extends string,
  TAccountRewardTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: CloseStakePositionAsyncInput<
    TAccountSigner,
    TAccountSignerRewardAccount,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerRewardAccount,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    signerRewardAccount: {
      value: input.signerRewardAccount ?? null,
      isWritable: true,
    },
    signerStakableAccount: {
      value: input.signerStakableAccount ?? null,
      isWritable: true,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    stakableMint: { value: input.stakableMint ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    stakePosition: { value: input.stakePosition ?? null, isWritable: true },
    stakeVault: { value: input.stakeVault ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakableTokenProgram: {
      value: input.stakableTokenProgram ?? null,
      isWritable: false,
    },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.stakeVault.value) {
    accounts.stakeVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.stakePosition.value)),
      ],
    });
  }
  if (!accounts.rewardVault.value) {
    accounts.rewardVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.launchpool.value)),
      ],
    });
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.signerRewardAccount),
      getAccountMeta(accounts.signerStakableAccount),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.stakableMint),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.stakePosition),
      getAccountMeta(accounts.stakeVault),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakableTokenProgram),
      getAccountMeta(accounts.rewardTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCloseStakePositionInstructionDataEncoder().encode({}),
  } as CloseStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerRewardAccount,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type CloseStakePositionInput<
  TAccountSigner extends string = string,
  TAccountSignerRewardAccount extends string = string,
  TAccountSignerStakableAccount extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountStakableMint extends string = string,
  TAccountRewardMint extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountStakePosition extends string = string,
  TAccountStakeVault extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakableTokenProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  signerRewardAccount: Address<TAccountSignerRewardAccount>;
  signerStakableAccount: Address<TAccountSignerStakableAccount>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  stakableMint: Address<TAccountStakableMint>;
  rewardMint: Address<TAccountRewardMint>;
  launchpool: Address<TAccountLaunchpool>;
  stakePosition: Address<TAccountStakePosition>;
  stakeVault: Address<TAccountStakeVault>;
  rewardVault: Address<TAccountRewardVault>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakableTokenProgram: Address<TAccountStakableTokenProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export function getCloseStakePositionInstruction<
  TAccountSigner extends string,
  TAccountSignerRewardAccount extends string,
  TAccountSignerStakableAccount extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountStakableMint extends string,
  TAccountRewardMint extends string,
  TAccountLaunchpool extends string,
  TAccountStakePosition extends string,
  TAccountStakeVault extends string,
  TAccountRewardVault extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountStakableTokenProgram extends string,
  TAccountRewardTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: CloseStakePositionInput<
    TAccountSigner,
    TAccountSignerRewardAccount,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseStakePositionInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountSignerRewardAccount,
  TAccountSignerStakableAccount,
  TAccountLaunchpoolsConfig,
  TAccountStakableMint,
  TAccountRewardMint,
  TAccountLaunchpool,
  TAccountStakePosition,
  TAccountStakeVault,
  TAccountRewardVault,
  TAccountRent,
  TAccountSystemProgram,
  TAccountStakableTokenProgram,
  TAccountRewardTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    signerRewardAccount: {
      value: input.signerRewardAccount ?? null,
      isWritable: true,
    },
    signerStakableAccount: {
      value: input.signerStakableAccount ?? null,
      isWritable: true,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    stakableMint: { value: input.stakableMint ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    stakePosition: { value: input.stakePosition ?? null, isWritable: true },
    stakeVault: { value: input.stakeVault ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakableTokenProgram: {
      value: input.stakableTokenProgram ?? null,
      isWritable: false,
    },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.signerRewardAccount),
      getAccountMeta(accounts.signerStakableAccount),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.stakableMint),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.stakePosition),
      getAccountMeta(accounts.stakeVault),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakableTokenProgram),
      getAccountMeta(accounts.rewardTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCloseStakePositionInstructionDataEncoder().encode({}),
  } as CloseStakePositionInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerRewardAccount,
    TAccountSignerStakableAccount,
    TAccountLaunchpoolsConfig,
    TAccountStakableMint,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountStakePosition,
    TAccountStakeVault,
    TAccountRewardVault,
    TAccountRent,
    TAccountSystemProgram,
    TAccountStakableTokenProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedCloseStakePositionInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    signerRewardAccount: TAccountMetas[1];
    signerStakableAccount: TAccountMetas[2];
    launchpoolsConfig: TAccountMetas[3];
    stakableMint: TAccountMetas[4];
    rewardMint: TAccountMetas[5];
    launchpool: TAccountMetas[6];
    stakePosition: TAccountMetas[7];
    stakeVault: TAccountMetas[8];
    rewardVault: TAccountMetas[9];
    rent: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    stakableTokenProgram: TAccountMetas[12];
    rewardTokenProgram: TAccountMetas[13];
    associatedTokenProgram: TAccountMetas[14];
  };
  data: CloseStakePositionInstructionData;
};

export function parseCloseStakePositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseStakePositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      signerRewardAccount: getNextAccount(),
      signerStakableAccount: getNextAccount(),
      launchpoolsConfig: getNextAccount(),
      stakableMint: getNextAccount(),
      rewardMint: getNextAccount(),
      launchpool: getNextAccount(),
      stakePosition: getNextAccount(),
      stakeVault: getNextAccount(),
      rewardVault: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
      stakableTokenProgram: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getCloseStakePositionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
