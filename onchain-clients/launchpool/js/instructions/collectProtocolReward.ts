/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { LAUNCHPOOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const COLLECT_PROTOCOL_REWARD_DISCRIMINATOR = new Uint8Array([
  231, 6, 221, 223, 151, 55, 220, 220,
]);

export function getCollectProtocolRewardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_PROTOCOL_REWARD_DISCRIMINATOR
  );
}

export type CollectProtocolRewardInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountRewardAuthority extends string | IAccountMeta<string> = string,
  TAccountLaunchpoolsConfig extends string | IAccountMeta<string> = string,
  TAccountRewardMint extends string | IAccountMeta<string> = string,
  TAccountLaunchpool extends string | IAccountMeta<string> = string,
  TAccountRewardVault extends string | IAccountMeta<string> = string,
  TAccountRewardAuthorityAccount extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRewardTokenProgram extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountRewardAuthority extends string
        ? ReadonlyAccount<TAccountRewardAuthority>
        : TAccountRewardAuthority,
      TAccountLaunchpoolsConfig extends string
        ? ReadonlyAccount<TAccountLaunchpoolsConfig>
        : TAccountLaunchpoolsConfig,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountLaunchpool extends string
        ? WritableAccount<TAccountLaunchpool>
        : TAccountLaunchpool,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardAuthorityAccount extends string
        ? WritableAccount<TAccountRewardAuthorityAccount>
        : TAccountRewardAuthorityAccount,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectProtocolRewardInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CollectProtocolRewardInstructionDataArgs = {};

export function getCollectProtocolRewardInstructionDataEncoder(): Encoder<CollectProtocolRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: COLLECT_PROTOCOL_REWARD_DISCRIMINATOR,
    })
  );
}

export function getCollectProtocolRewardInstructionDataDecoder(): Decoder<CollectProtocolRewardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCollectProtocolRewardInstructionDataCodec(): Codec<
  CollectProtocolRewardInstructionDataArgs,
  CollectProtocolRewardInstructionData
> {
  return combineCodec(
    getCollectProtocolRewardInstructionDataEncoder(),
    getCollectProtocolRewardInstructionDataDecoder()
  );
}

export type CollectProtocolRewardAsyncInput<
  TAccountSigner extends string = string,
  TAccountRewardAuthority extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountRewardMint extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardAuthorityAccount extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  rewardAuthority: Address<TAccountRewardAuthority>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  rewardMint: Address<TAccountRewardMint>;
  launchpool: Address<TAccountLaunchpool>;
  rewardVault?: Address<TAccountRewardVault>;
  rewardAuthorityAccount?: Address<TAccountRewardAuthorityAccount>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export async function getCollectProtocolRewardInstructionAsync<
  TAccountSigner extends string,
  TAccountRewardAuthority extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountRewardMint extends string,
  TAccountLaunchpool extends string,
  TAccountRewardVault extends string,
  TAccountRewardAuthorityAccount extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountRewardTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: CollectProtocolRewardAsyncInput<
    TAccountSigner,
    TAccountRewardAuthority,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRewardAuthorityAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CollectProtocolRewardInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountRewardAuthority,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRewardAuthorityAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    rewardAuthority: {
      value: input.rewardAuthority ?? null,
      isWritable: false,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardAuthorityAccount: {
      value: input.rewardAuthorityAccount ?? null,
      isWritable: true,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rewardVault.value) {
    accounts.rewardVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.launchpool.value)),
      ],
    });
  }
  if (!accounts.rewardAuthorityAccount.value) {
    accounts.rewardAuthorityAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.rewardAuthority.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.rewardTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.rewardMint.value)),
      ],
    });
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.rewardAuthority),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardAuthorityAccount),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rewardTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCollectProtocolRewardInstructionDataEncoder().encode({}),
  } as CollectProtocolRewardInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountRewardAuthority,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRewardAuthorityAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type CollectProtocolRewardInput<
  TAccountSigner extends string = string,
  TAccountRewardAuthority extends string = string,
  TAccountLaunchpoolsConfig extends string = string,
  TAccountRewardMint extends string = string,
  TAccountLaunchpool extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardAuthorityAccount extends string = string,
  TAccountRent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  rewardAuthority: Address<TAccountRewardAuthority>;
  launchpoolsConfig: Address<TAccountLaunchpoolsConfig>;
  rewardMint: Address<TAccountRewardMint>;
  launchpool: Address<TAccountLaunchpool>;
  rewardVault: Address<TAccountRewardVault>;
  rewardAuthorityAccount: Address<TAccountRewardAuthorityAccount>;
  rent?: Address<TAccountRent>;
  systemProgram?: Address<TAccountSystemProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export function getCollectProtocolRewardInstruction<
  TAccountSigner extends string,
  TAccountRewardAuthority extends string,
  TAccountLaunchpoolsConfig extends string,
  TAccountRewardMint extends string,
  TAccountLaunchpool extends string,
  TAccountRewardVault extends string,
  TAccountRewardAuthorityAccount extends string,
  TAccountRent extends string,
  TAccountSystemProgram extends string,
  TAccountRewardTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
>(
  input: CollectProtocolRewardInput<
    TAccountSigner,
    TAccountRewardAuthority,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRewardAuthorityAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectProtocolRewardInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountRewardAuthority,
  TAccountLaunchpoolsConfig,
  TAccountRewardMint,
  TAccountLaunchpool,
  TAccountRewardVault,
  TAccountRewardAuthorityAccount,
  TAccountRent,
  TAccountSystemProgram,
  TAccountRewardTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? LAUNCHPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    rewardAuthority: {
      value: input.rewardAuthority ?? null,
      isWritable: false,
    },
    launchpoolsConfig: {
      value: input.launchpoolsConfig ?? null,
      isWritable: false,
    },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    launchpool: { value: input.launchpool ?? null, isWritable: true },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardAuthorityAccount: {
      value: input.rewardAuthorityAccount ?? null,
      isWritable: true,
    },
    rent: { value: input.rent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.rewardAuthority),
      getAccountMeta(accounts.launchpoolsConfig),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.launchpool),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardAuthorityAccount),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rewardTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCollectProtocolRewardInstructionDataEncoder().encode({}),
  } as CollectProtocolRewardInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountRewardAuthority,
    TAccountLaunchpoolsConfig,
    TAccountRewardMint,
    TAccountLaunchpool,
    TAccountRewardVault,
    TAccountRewardAuthorityAccount,
    TAccountRent,
    TAccountSystemProgram,
    TAccountRewardTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedCollectProtocolRewardInstruction<
  TProgram extends string = typeof LAUNCHPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    rewardAuthority: TAccountMetas[1];
    launchpoolsConfig: TAccountMetas[2];
    rewardMint: TAccountMetas[3];
    launchpool: TAccountMetas[4];
    rewardVault: TAccountMetas[5];
    rewardAuthorityAccount: TAccountMetas[6];
    rent: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    rewardTokenProgram: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
  };
  data: CollectProtocolRewardInstructionData;
};

export function parseCollectProtocolRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCollectProtocolRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      rewardAuthority: getNextAccount(),
      launchpoolsConfig: getNextAccount(),
      rewardMint: getNextAccount(),
      launchpool: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardAuthorityAccount: getNextAccount(),
      rent: getNextAccount(),
      systemProgram: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getCollectProtocolRewardInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
