/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCloseStakePositionInstruction,
  type ParsedCollectProtocolRewardInstruction,
  type ParsedIncreaseStakePositionInstruction,
  type ParsedInitializeLaunchpoolInstruction,
  type ParsedInitializeLaunchpoolsConfigInstruction,
  type ParsedInitializeLaunchpoolsConfigsManagerInstruction,
  type ParsedLaunchLaunchpoolInstruction,
  type ParsedOpenStakePositionInstruction,
  type ParsedUpdateLaunchpoolsConfigDurationInstruction,
  type ParsedUpdateLaunchpoolsConfigPositionSizesInstruction,
  type ParsedUpdateLaunchpoolsConfigProtocolRewardShareInstruction,
  type ParsedUpdateLaunchpoolsConfigRewardAuthorityInstruction,
  type ParsedUpdateLaunchpoolsConfigsManagerAuthorityInstruction,
  type ParsedUpdateLaunchpoolsConfigsManagerHeadAuthorityInstruction,
} from '../instructions';

export const LAUNCHPOOL_PROGRAM_ADDRESS =
  '5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU' as Address<'5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU'>;

export enum LaunchpoolAccount {
  Launchpool,
  LaunchpoolsConfig,
  LaunchpoolsConfigsManager,
  StakePosition,
}

export function identifyLaunchpoolAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LaunchpoolAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 19, 72, 21, 103, 40, 224, 251])
      ),
      0
    )
  ) {
    return LaunchpoolAccount.Launchpool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 172, 249, 177, 118, 125, 129, 132])
      ),
      0
    )
  ) {
    return LaunchpoolAccount.LaunchpoolsConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 218, 17, 176, 231, 150, 7, 11])
      ),
      0
    )
  ) {
    return LaunchpoolAccount.LaunchpoolsConfigsManager;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([78, 165, 30, 111, 171, 125, 11, 220])
      ),
      0
    )
  ) {
    return LaunchpoolAccount.StakePosition;
  }
  throw new Error(
    'The provided account could not be identified as a launchpool account.'
  );
}

export enum LaunchpoolInstruction {
  CloseStakePosition,
  CollectProtocolReward,
  IncreaseStakePosition,
  InitializeLaunchpool,
  InitializeLaunchpoolsConfig,
  InitializeLaunchpoolsConfigsManager,
  LaunchLaunchpool,
  OpenStakePosition,
  UpdateLaunchpoolsConfigDuration,
  UpdateLaunchpoolsConfigPositionSizes,
  UpdateLaunchpoolsConfigProtocolRewardShare,
  UpdateLaunchpoolsConfigRewardAuthority,
  UpdateLaunchpoolsConfigsManagerAuthority,
  UpdateLaunchpoolsConfigsManagerHeadAuthority,
}

export function identifyLaunchpoolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LaunchpoolInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([8, 63, 74, 143, 105, 42, 28, 64])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.CloseStakePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([231, 6, 221, 223, 151, 55, 220, 220])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.CollectProtocolReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([180, 156, 141, 191, 172, 190, 10, 26])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.IncreaseStakePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 238, 139, 169, 11, 60, 242, 202])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.InitializeLaunchpool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([29, 24, 244, 80, 150, 166, 49, 195])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.InitializeLaunchpoolsConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([215, 201, 70, 202, 198, 131, 180, 137])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.InitializeLaunchpoolsConfigsManager;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 196, 50, 30, 168, 108, 120, 59])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.LaunchLaunchpool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([100, 46, 32, 248, 0, 29, 122, 21])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.OpenStakePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([220, 251, 136, 16, 65, 221, 15, 230])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.UpdateLaunchpoolsConfigDuration;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([216, 176, 23, 53, 154, 201, 212, 172])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.UpdateLaunchpoolsConfigPositionSizes;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([134, 185, 182, 122, 22, 243, 99, 10])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.UpdateLaunchpoolsConfigProtocolRewardShare;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 70, 231, 58, 103, 47, 83, 57])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.UpdateLaunchpoolsConfigRewardAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([235, 44, 179, 233, 192, 9, 1, 217])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.UpdateLaunchpoolsConfigsManagerAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 235, 147, 149, 161, 117, 147, 222])
      ),
      0
    )
  ) {
    return LaunchpoolInstruction.UpdateLaunchpoolsConfigsManagerHeadAuthority;
  }
  throw new Error(
    'The provided instruction could not be identified as a launchpool instruction.'
  );
}

export type ParsedLaunchpoolInstruction<
  TProgram extends string = '5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU',
> =
  | ({
      instructionType: LaunchpoolInstruction.CloseStakePosition;
    } & ParsedCloseStakePositionInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.CollectProtocolReward;
    } & ParsedCollectProtocolRewardInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.IncreaseStakePosition;
    } & ParsedIncreaseStakePositionInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.InitializeLaunchpool;
    } & ParsedInitializeLaunchpoolInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.InitializeLaunchpoolsConfig;
    } & ParsedInitializeLaunchpoolsConfigInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.InitializeLaunchpoolsConfigsManager;
    } & ParsedInitializeLaunchpoolsConfigsManagerInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.LaunchLaunchpool;
    } & ParsedLaunchLaunchpoolInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.OpenStakePosition;
    } & ParsedOpenStakePositionInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.UpdateLaunchpoolsConfigDuration;
    } & ParsedUpdateLaunchpoolsConfigDurationInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.UpdateLaunchpoolsConfigPositionSizes;
    } & ParsedUpdateLaunchpoolsConfigPositionSizesInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.UpdateLaunchpoolsConfigProtocolRewardShare;
    } & ParsedUpdateLaunchpoolsConfigProtocolRewardShareInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.UpdateLaunchpoolsConfigRewardAuthority;
    } & ParsedUpdateLaunchpoolsConfigRewardAuthorityInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.UpdateLaunchpoolsConfigsManagerAuthority;
    } & ParsedUpdateLaunchpoolsConfigsManagerAuthorityInstruction<TProgram>)
  | ({
      instructionType: LaunchpoolInstruction.UpdateLaunchpoolsConfigsManagerHeadAuthority;
    } & ParsedUpdateLaunchpoolsConfigsManagerHeadAuthorityInstruction<TProgram>);
