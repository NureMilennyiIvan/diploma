/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { LAUNCHPOOL_PROGRAM_ADDRESS } from '../programs';

/** InvalidInitialRewardAmount: Invalid initial reward amount provided during initialization. */
export const LAUNCHPOOL_ERROR__INVALID_INITIAL_REWARD_AMOUNT = 0x1770; // 6000
/** LaunchpoolAlreadyInitialized: Launchpool is already initialized. */
export const LAUNCHPOOL_ERROR__LAUNCHPOOL_ALREADY_INITIALIZED = 0x1771; // 6001
/** LaunchpoolNotLaunched: Launchpool must be in 'Launched' status. */
export const LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_LAUNCHED = 0x1772; // 6002
/** LaunchpoolNotStartedYet: Launchpool has not started yet. */
export const LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_STARTED_YET = 0x1773; // 6003
/** LaunchpoolAlreadyEnded: Launchpool has already ended. */
export const LAUNCHPOOL_ERROR__LAUNCHPOOL_ALREADY_ENDED = 0x1774; // 6004
/** LaunchpoolNotEndedYet: Launchpool has not ended yet. */
export const LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_ENDED_YET = 0x1775; // 6005
/** LaunchpoolNotFinished: Launchpool is not finished yet. */
export const LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_FINISHED = 0x1776; // 6006
/** LaunchpoolNotInitialized: Launchpool is not initialized. */
export const LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_INITIALIZED = 0x1777; // 6007
/** StartTimeInPast: Provided start time is in the past. */
export const LAUNCHPOOL_ERROR__START_TIME_IN_PAST = 0x1778; // 6008
/** EndTimeOverflow: Overflow occurred when calculating end time. */
export const LAUNCHPOOL_ERROR__END_TIME_OVERFLOW = 0x1779; // 6009
/** EffectiveTimeBeforeLastAccrual: Effective time is before the last update timestamp. */
export const LAUNCHPOOL_ERROR__EFFECTIVE_TIME_BEFORE_LAST_ACCRUAL = 0x177a; // 6010
/** RewardCalculationOverflow: Overflow occurred during reward calculation. */
export const LAUNCHPOOL_ERROR__REWARD_CALCULATION_OVERFLOW = 0x177b; // 6011
/** DivisionByZeroDuringRewardCalculation: Division by zero during reward calculation. */
export const LAUNCHPOOL_ERROR__DIVISION_BY_ZERO_DURING_REWARD_CALCULATION = 0x177c; // 6012
/** RewardRateOverflow: Overflow occurred while calculating reward rate. */
export const LAUNCHPOOL_ERROR__REWARD_RATE_OVERFLOW = 0x177d; // 6013
/** RewardPerTokenOverflow: Overflow occurred while updating reward per token. */
export const LAUNCHPOOL_ERROR__REWARD_PER_TOKEN_OVERFLOW = 0x177e; // 6014
/** StakedAmountOverflow: Overflow occurred while updating staked amount. */
export const LAUNCHPOOL_ERROR__STAKED_AMOUNT_OVERFLOW = 0x177f; // 6015
/** RewardDistributionOverflow: Overflow occurred while distributing rewards. */
export const LAUNCHPOOL_ERROR__REWARD_DISTRIBUTION_OVERFLOW = 0x1780; // 6016
/** RewardObtentionOverflow: Overflow occurred while redeeming participant rewards. */
export const LAUNCHPOOL_ERROR__REWARD_OBTENTION_OVERFLOW = 0x1781; // 6017

export type LaunchpoolError =
  | typeof LAUNCHPOOL_ERROR__DIVISION_BY_ZERO_DURING_REWARD_CALCULATION
  | typeof LAUNCHPOOL_ERROR__EFFECTIVE_TIME_BEFORE_LAST_ACCRUAL
  | typeof LAUNCHPOOL_ERROR__END_TIME_OVERFLOW
  | typeof LAUNCHPOOL_ERROR__INVALID_INITIAL_REWARD_AMOUNT
  | typeof LAUNCHPOOL_ERROR__LAUNCHPOOL_ALREADY_ENDED
  | typeof LAUNCHPOOL_ERROR__LAUNCHPOOL_ALREADY_INITIALIZED
  | typeof LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_ENDED_YET
  | typeof LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_FINISHED
  | typeof LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_INITIALIZED
  | typeof LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_LAUNCHED
  | typeof LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_STARTED_YET
  | typeof LAUNCHPOOL_ERROR__REWARD_CALCULATION_OVERFLOW
  | typeof LAUNCHPOOL_ERROR__REWARD_DISTRIBUTION_OVERFLOW
  | typeof LAUNCHPOOL_ERROR__REWARD_OBTENTION_OVERFLOW
  | typeof LAUNCHPOOL_ERROR__REWARD_PER_TOKEN_OVERFLOW
  | typeof LAUNCHPOOL_ERROR__REWARD_RATE_OVERFLOW
  | typeof LAUNCHPOOL_ERROR__STAKED_AMOUNT_OVERFLOW
  | typeof LAUNCHPOOL_ERROR__START_TIME_IN_PAST;

let launchpoolErrorMessages: Record<LaunchpoolError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  launchpoolErrorMessages = {
    [LAUNCHPOOL_ERROR__DIVISION_BY_ZERO_DURING_REWARD_CALCULATION]: `Division by zero during reward calculation.`,
    [LAUNCHPOOL_ERROR__EFFECTIVE_TIME_BEFORE_LAST_ACCRUAL]: `Effective time is before the last update timestamp.`,
    [LAUNCHPOOL_ERROR__END_TIME_OVERFLOW]: `Overflow occurred when calculating end time.`,
    [LAUNCHPOOL_ERROR__INVALID_INITIAL_REWARD_AMOUNT]: `Invalid initial reward amount provided during initialization.`,
    [LAUNCHPOOL_ERROR__LAUNCHPOOL_ALREADY_ENDED]: `Launchpool has already ended.`,
    [LAUNCHPOOL_ERROR__LAUNCHPOOL_ALREADY_INITIALIZED]: `Launchpool is already initialized.`,
    [LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_ENDED_YET]: `Launchpool has not ended yet.`,
    [LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_FINISHED]: `Launchpool is not finished yet.`,
    [LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_INITIALIZED]: `Launchpool is not initialized.`,
    [LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_LAUNCHED]: `Launchpool must be in 'Launched' status.`,
    [LAUNCHPOOL_ERROR__LAUNCHPOOL_NOT_STARTED_YET]: `Launchpool has not started yet.`,
    [LAUNCHPOOL_ERROR__REWARD_CALCULATION_OVERFLOW]: `Overflow occurred during reward calculation.`,
    [LAUNCHPOOL_ERROR__REWARD_DISTRIBUTION_OVERFLOW]: `Overflow occurred while distributing rewards.`,
    [LAUNCHPOOL_ERROR__REWARD_OBTENTION_OVERFLOW]: `Overflow occurred while redeeming participant rewards.`,
    [LAUNCHPOOL_ERROR__REWARD_PER_TOKEN_OVERFLOW]: `Overflow occurred while updating reward per token.`,
    [LAUNCHPOOL_ERROR__REWARD_RATE_OVERFLOW]: `Overflow occurred while calculating reward rate.`,
    [LAUNCHPOOL_ERROR__STAKED_AMOUNT_OVERFLOW]: `Overflow occurred while updating staked amount.`,
    [LAUNCHPOOL_ERROR__START_TIME_IN_PAST]: `Provided start time is in the past.`,
  };
}

export function getLaunchpoolErrorMessage(code: LaunchpoolError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (launchpoolErrorMessages as Record<LaunchpoolError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isLaunchpoolError<TProgramErrorCode extends LaunchpoolError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    LAUNCHPOOL_PROGRAM_ADDRESS,
    code
  );
}
