/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const LAUNCHPOOLS_CONFIG_DISCRIMINATOR = new Uint8Array([
  46, 172, 249, 177, 118, 125, 129, 132,
]);

export function getLaunchpoolsConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LAUNCHPOOLS_CONFIG_DISCRIMINATOR
  );
}

export type LaunchpoolsConfig = {
  discriminator: ReadonlyUint8Array;
  stakableMint: Address;
  rewardAuthority: Address;
  minPositionSize: bigint;
  maxPositionSize: bigint;
  protocolRewardShareBasisPoints: number;
  duration: bigint;
  bump: number;
  id: bigint;
};

export type LaunchpoolsConfigArgs = {
  stakableMint: Address;
  rewardAuthority: Address;
  minPositionSize: number | bigint;
  maxPositionSize: number | bigint;
  protocolRewardShareBasisPoints: number;
  duration: number | bigint;
  bump: number;
  id: number | bigint;
};

export function getLaunchpoolsConfigEncoder(): Encoder<LaunchpoolsConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakableMint', getAddressEncoder()],
      ['rewardAuthority', getAddressEncoder()],
      ['minPositionSize', getU64Encoder()],
      ['maxPositionSize', getU64Encoder()],
      ['protocolRewardShareBasisPoints', getU16Encoder()],
      ['duration', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['id', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LAUNCHPOOLS_CONFIG_DISCRIMINATOR })
  );
}

export function getLaunchpoolsConfigDecoder(): Decoder<LaunchpoolsConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakableMint', getAddressDecoder()],
    ['rewardAuthority', getAddressDecoder()],
    ['minPositionSize', getU64Decoder()],
    ['maxPositionSize', getU64Decoder()],
    ['protocolRewardShareBasisPoints', getU16Decoder()],
    ['duration', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['id', getU64Decoder()],
  ]);
}

export function getLaunchpoolsConfigCodec(): Codec<
  LaunchpoolsConfigArgs,
  LaunchpoolsConfig
> {
  return combineCodec(
    getLaunchpoolsConfigEncoder(),
    getLaunchpoolsConfigDecoder()
  );
}

export function decodeLaunchpoolsConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<LaunchpoolsConfig, TAddress>;
export function decodeLaunchpoolsConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<LaunchpoolsConfig, TAddress>;
export function decodeLaunchpoolsConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<LaunchpoolsConfig, TAddress>
  | MaybeAccount<LaunchpoolsConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLaunchpoolsConfigDecoder()
  );
}

export async function fetchLaunchpoolsConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<LaunchpoolsConfig, TAddress>> {
  const maybeAccount = await fetchMaybeLaunchpoolsConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLaunchpoolsConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<LaunchpoolsConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLaunchpoolsConfig(maybeAccount);
}

export async function fetchAllLaunchpoolsConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<LaunchpoolsConfig>[]> {
  const maybeAccounts = await fetchAllMaybeLaunchpoolsConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLaunchpoolsConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<LaunchpoolsConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeLaunchpoolsConfig(maybeAccount)
  );
}

export function getLaunchpoolsConfigSize(): number {
  return 107;
}
