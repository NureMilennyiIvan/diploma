/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getPositionStatusDecoder,
  getPositionStatusEncoder,
  getQ64128Decoder,
  getQ64128Encoder,
  type PositionStatus,
  type PositionStatusArgs,
  type Q64128,
  type Q64128Args,
} from '../types';

export const STAKE_POSITION_DISCRIMINATOR = new Uint8Array([
  78, 165, 30, 111, 171, 125, 11, 220,
]);

export function getStakePositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STAKE_POSITION_DISCRIMINATOR
  );
}

export type StakePosition = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  launchpool: Address;
  stakeVault: Address;
  amount: Q64128;
  rewardEarned: Q64128;
  rewardDebt: Q64128;
  status: PositionStatus;
  bump: Array<number>;
  stakeVaultBump: Array<number>;
};

export type StakePositionArgs = {
  authority: Address;
  launchpool: Address;
  stakeVault: Address;
  amount: Q64128Args;
  rewardEarned: Q64128Args;
  rewardDebt: Q64128Args;
  status: PositionStatusArgs;
  bump: Array<number>;
  stakeVaultBump: Array<number>;
};

export function getStakePositionEncoder(): Encoder<StakePositionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['launchpool', getAddressEncoder()],
      ['stakeVault', getAddressEncoder()],
      ['amount', getQ64128Encoder()],
      ['rewardEarned', getQ64128Encoder()],
      ['rewardDebt', getQ64128Encoder()],
      ['status', getPositionStatusEncoder()],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['stakeVaultBump', getArrayEncoder(getU8Encoder(), { size: 1 })],
    ]),
    (value) => ({ ...value, discriminator: STAKE_POSITION_DISCRIMINATOR })
  );
}

export function getStakePositionDecoder(): Decoder<StakePosition> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['launchpool', getAddressDecoder()],
    ['stakeVault', getAddressDecoder()],
    ['amount', getQ64128Decoder()],
    ['rewardEarned', getQ64128Decoder()],
    ['rewardDebt', getQ64128Decoder()],
    ['status', getPositionStatusDecoder()],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['stakeVaultBump', getArrayDecoder(getU8Decoder(), { size: 1 })],
  ]);
}

export function getStakePositionCodec(): Codec<
  StakePositionArgs,
  StakePosition
> {
  return combineCodec(getStakePositionEncoder(), getStakePositionDecoder());
}

export function decodeStakePosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakePosition, TAddress>;
export function decodeStakePosition<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakePosition, TAddress>;
export function decodeStakePosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<StakePosition, TAddress> | MaybeAccount<StakePosition, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakePositionDecoder()
  );
}

export async function fetchStakePosition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakePosition, TAddress>> {
  const maybeAccount = await fetchMaybeStakePosition(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakePosition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakePosition, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakePosition(maybeAccount);
}

export async function fetchAllStakePosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakePosition>[]> {
  const maybeAccounts = await fetchAllMaybeStakePosition(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakePosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakePosition>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStakePosition(maybeAccount));
}
