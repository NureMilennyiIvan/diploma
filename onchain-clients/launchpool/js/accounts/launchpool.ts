/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLaunchpoolStatusDecoder,
  getLaunchpoolStatusEncoder,
  getQ64128Decoder,
  getQ64128Encoder,
  type LaunchpoolStatus,
  type LaunchpoolStatusArgs,
  type Q64128,
  type Q64128Args,
} from '../types';

export const LAUNCHPOOL_DISCRIMINATOR = new Uint8Array([
  145, 19, 72, 21, 103, 40, 224, 251,
]);

export function getLaunchpoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LAUNCHPOOL_DISCRIMINATOR);
}

export type Launchpool = {
  discriminator: ReadonlyUint8Array;
  rewardVault: Address;
  rewardMint: Address;
  launchpoolsConfig: Address;
  startTimestamp: bigint;
  endTimestamp: bigint;
  lastUpdateTimestamp: bigint;
  initialRewardAmount: bigint;
  participantsRewardAmount: Q64128;
  protocolRewardAmount: bigint;
  protocolRewardLeftToObtain: bigint;
  participantsRewardLeftToObtain: bigint;
  stakedAmount: bigint;
  participantsRewardLeftToDistribute: Q64128;
  rewardRate: Q64128;
  rewardPerToken: Q64128;
  minPositionSize: bigint;
  maxPositionSize: bigint;
  status: LaunchpoolStatus;
  bump: Array<number>;
  rewardVaultBump: Array<number>;
};

export type LaunchpoolArgs = {
  rewardVault: Address;
  rewardMint: Address;
  launchpoolsConfig: Address;
  startTimestamp: number | bigint;
  endTimestamp: number | bigint;
  lastUpdateTimestamp: number | bigint;
  initialRewardAmount: number | bigint;
  participantsRewardAmount: Q64128Args;
  protocolRewardAmount: number | bigint;
  protocolRewardLeftToObtain: number | bigint;
  participantsRewardLeftToObtain: number | bigint;
  stakedAmount: number | bigint;
  participantsRewardLeftToDistribute: Q64128Args;
  rewardRate: Q64128Args;
  rewardPerToken: Q64128Args;
  minPositionSize: number | bigint;
  maxPositionSize: number | bigint;
  status: LaunchpoolStatusArgs;
  bump: Array<number>;
  rewardVaultBump: Array<number>;
};

export function getLaunchpoolEncoder(): Encoder<LaunchpoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardVault', getAddressEncoder()],
      ['rewardMint', getAddressEncoder()],
      ['launchpoolsConfig', getAddressEncoder()],
      ['startTimestamp', getU64Encoder()],
      ['endTimestamp', getU64Encoder()],
      ['lastUpdateTimestamp', getU64Encoder()],
      ['initialRewardAmount', getU64Encoder()],
      ['participantsRewardAmount', getQ64128Encoder()],
      ['protocolRewardAmount', getU64Encoder()],
      ['protocolRewardLeftToObtain', getU64Encoder()],
      ['participantsRewardLeftToObtain', getU64Encoder()],
      ['stakedAmount', getU64Encoder()],
      ['participantsRewardLeftToDistribute', getQ64128Encoder()],
      ['rewardRate', getQ64128Encoder()],
      ['rewardPerToken', getQ64128Encoder()],
      ['minPositionSize', getU64Encoder()],
      ['maxPositionSize', getU64Encoder()],
      ['status', getLaunchpoolStatusEncoder()],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['rewardVaultBump', getArrayEncoder(getU8Encoder(), { size: 1 })],
    ]),
    (value) => ({ ...value, discriminator: LAUNCHPOOL_DISCRIMINATOR })
  );
}

export function getLaunchpoolDecoder(): Decoder<Launchpool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardVault', getAddressDecoder()],
    ['rewardMint', getAddressDecoder()],
    ['launchpoolsConfig', getAddressDecoder()],
    ['startTimestamp', getU64Decoder()],
    ['endTimestamp', getU64Decoder()],
    ['lastUpdateTimestamp', getU64Decoder()],
    ['initialRewardAmount', getU64Decoder()],
    ['participantsRewardAmount', getQ64128Decoder()],
    ['protocolRewardAmount', getU64Decoder()],
    ['protocolRewardLeftToObtain', getU64Decoder()],
    ['participantsRewardLeftToObtain', getU64Decoder()],
    ['stakedAmount', getU64Decoder()],
    ['participantsRewardLeftToDistribute', getQ64128Decoder()],
    ['rewardRate', getQ64128Decoder()],
    ['rewardPerToken', getQ64128Decoder()],
    ['minPositionSize', getU64Decoder()],
    ['maxPositionSize', getU64Decoder()],
    ['status', getLaunchpoolStatusDecoder()],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['rewardVaultBump', getArrayDecoder(getU8Decoder(), { size: 1 })],
  ]);
}

export function getLaunchpoolCodec(): Codec<LaunchpoolArgs, Launchpool> {
  return combineCodec(getLaunchpoolEncoder(), getLaunchpoolDecoder());
}

export function decodeLaunchpool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Launchpool, TAddress>;
export function decodeLaunchpool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Launchpool, TAddress>;
export function decodeLaunchpool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Launchpool, TAddress> | MaybeAccount<Launchpool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLaunchpoolDecoder()
  );
}

export async function fetchLaunchpool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Launchpool, TAddress>> {
  const maybeAccount = await fetchMaybeLaunchpool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLaunchpool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Launchpool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLaunchpool(maybeAccount);
}

export async function fetchAllLaunchpool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Launchpool>[]> {
  const maybeAccounts = await fetchAllMaybeLaunchpool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLaunchpool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Launchpool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeLaunchpool(maybeAccount));
}
