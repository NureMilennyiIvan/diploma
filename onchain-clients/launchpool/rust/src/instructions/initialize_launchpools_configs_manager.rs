//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct InitializeLaunchpoolsConfigsManager {
      
              
          pub signer: solana_program::pubkey::Pubkey,
          
              
          pub launchpools_configs_manager: solana_program::pubkey::Pubkey,
          
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub head_authority: solana_program::pubkey::Pubkey,
          
              
          pub program_data: solana_program::pubkey::Pubkey,
          
              
          pub launchpool_program: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl InitializeLaunchpoolsConfigsManager {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.signer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.launchpools_configs_manager,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.head_authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program_data,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.launchpool_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&InitializeLaunchpoolsConfigsManagerInstructionData::new()).unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::LAUNCHPOOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeLaunchpoolsConfigsManagerInstructionData {
            discriminator: [u8; 8],
      }

impl InitializeLaunchpoolsConfigsManagerInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [215, 201, 70, 202, 198, 131, 180, 137],
                  }
  }
}

impl Default for InitializeLaunchpoolsConfigsManagerInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `InitializeLaunchpoolsConfigsManager`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` launchpools_configs_manager
          ///   2. `[]` authority
          ///   3. `[]` head_authority
          ///   4. `[]` program_data
                ///   5. `[optional]` launchpool_program (default to `5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU`)
                ///   6. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
                ///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeLaunchpoolsConfigsManagerBuilder {
            signer: Option<solana_program::pubkey::Pubkey>,
                launchpools_configs_manager: Option<solana_program::pubkey::Pubkey>,
                authority: Option<solana_program::pubkey::Pubkey>,
                head_authority: Option<solana_program::pubkey::Pubkey>,
                program_data: Option<solana_program::pubkey::Pubkey>,
                launchpool_program: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeLaunchpoolsConfigsManagerBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn launchpools_configs_manager(&mut self, launchpools_configs_manager: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.launchpools_configs_manager = Some(launchpools_configs_manager);
                    self
    }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn head_authority(&mut self, head_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.head_authority = Some(head_authority);
                    self
    }
            #[inline(always)]
    pub fn program_data(&mut self, program_data: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.program_data = Some(program_data);
                    self
    }
            /// `[optional account, default to '5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU']`
#[inline(always)]
    pub fn launchpool_program(&mut self, launchpool_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.launchpool_program = Some(launchpool_program);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = InitializeLaunchpoolsConfigsManager {
                              signer: self.signer.expect("signer is not set"),
                                        launchpools_configs_manager: self.launchpools_configs_manager.expect("launchpools_configs_manager is not set"),
                                        authority: self.authority.expect("authority is not set"),
                                        head_authority: self.head_authority.expect("head_authority is not set"),
                                        program_data: self.program_data.expect("program_data is not set"),
                                        launchpool_program: self.launchpool_program.unwrap_or(solana_program::pubkey!("5M9TeHHBeAtUd956yRUW9TEULF5XqGUdcyfy74YDzXHU")),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `initialize_launchpools_configs_manager` CPI accounts.
  pub struct InitializeLaunchpoolsConfigsManagerCpiAccounts<'a, 'b> {
          
                    
              pub signer: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub launchpools_configs_manager: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub head_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub program_data: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub launchpool_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `initialize_launchpools_configs_manager` CPI instruction.
pub struct InitializeLaunchpoolsConfigsManagerCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub signer: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub launchpools_configs_manager: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub head_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub program_data: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub launchpool_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> InitializeLaunchpoolsConfigsManagerCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: InitializeLaunchpoolsConfigsManagerCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              launchpools_configs_manager: accounts.launchpools_configs_manager,
              authority: accounts.authority,
              head_authority: accounts.head_authority,
              program_data: accounts.program_data,
              launchpool_program: accounts.launchpool_program,
              rent: accounts.rent,
              system_program: accounts.system_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.launchpools_configs_manager.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.head_authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program_data.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.launchpool_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&InitializeLaunchpoolsConfigsManagerInstructionData::new()).unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::LAUNCHPOOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.launchpools_configs_manager.clone());
                        account_infos.push(self.authority.clone());
                        account_infos.push(self.head_authority.clone());
                        account_infos.push(self.program_data.clone());
                        account_infos.push(self.launchpool_program.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitializeLaunchpoolsConfigsManager` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` launchpools_configs_manager
          ///   2. `[]` authority
          ///   3. `[]` head_authority
          ///   4. `[]` program_data
          ///   5. `[]` launchpool_program
          ///   6. `[]` rent
          ///   7. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeLaunchpoolsConfigsManagerCpiBuilder<'a, 'b> {
  instruction: Box<InitializeLaunchpoolsConfigsManagerCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeLaunchpoolsConfigsManagerCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeLaunchpoolsConfigsManagerCpiBuilderInstruction {
      __program: program,
              signer: None,
              launchpools_configs_manager: None,
              authority: None,
              head_authority: None,
              program_data: None,
              launchpool_program: None,
              rent: None,
              system_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn launchpools_configs_manager(&mut self, launchpools_configs_manager: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.launchpools_configs_manager = Some(launchpools_configs_manager);
                    self
    }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn head_authority(&mut self, head_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.head_authority = Some(head_authority);
                    self
    }
      #[inline(always)]
    pub fn program_data(&mut self, program_data: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program_data = Some(program_data);
                    self
    }
      #[inline(always)]
    pub fn launchpool_program(&mut self, launchpool_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.launchpool_program = Some(launchpool_program);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = InitializeLaunchpoolsConfigsManagerCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          launchpools_configs_manager: self.instruction.launchpools_configs_manager.expect("launchpools_configs_manager is not set"),
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          head_authority: self.instruction.head_authority.expect("head_authority is not set"),
                  
          program_data: self.instruction.program_data.expect("program_data is not set"),
                  
          launchpool_program: self.instruction.launchpool_program.expect("launchpool_program is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeLaunchpoolsConfigsManagerCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                launchpools_configs_manager: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                head_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                program_data: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                launchpool_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

